<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <link href="https://cool.devo.build/main.xml" rel="self" type="application/atom+xml" />
  <link href="https://cool.devo.build/" rel="alternate" type="text/html" />
  <updated>2021-10-19T20:51:46+00:00</updated>
  <id>https://cool.devo.build/main.xml</id>

  

  
    <title type="html">Oracle Dev.O Tutorials</title>
  

  
    <subtitle>Cool stuff from Oracle's Developer Relations team</subtitle>
  

  
    <author>
        <name>Oracle Developer Community</name>
      
      
    </author>
  

  
  <!--
   -->
  
  
  
  
    <entry>
      

      <title type="html">Terraform variables</title>
      <link href="https://cool.devo.build/collections/tutorials/tf-101/4-variables" rel="alternate" type="text/html" title="Terraform variables" />
      <published>2021-10-14T12:00:00+00:00</published>
      <updated>2021-10-14T12:00:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/tf-101/4-variables</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/tf-101/4-variables">&lt;p&gt;This lesson will take a deeper look at Terraform variabales.  You’ve already had a little bit of exposure to them in the &lt;a href=&quot;2-experiencing-terraform&quot;&gt;Experiencing Terraform&lt;/a&gt; tutorial, as well as a brief summary in the &lt;a href=&quot;3-understanding-terraform&quot;&gt;Understanding Terraform Concepts&lt;/a&gt; tutorial.  Let’s dive in and take a deeper look at what these are and how they’re used.&lt;/p&gt;

&lt;h2 id=&quot;why-use-variables&quot;&gt;Why use variables?&lt;/h2&gt;

&lt;p&gt;Variables provide a way to easily decouple a value and its reference from your Terraform code.  A topology may be defined, but the specifics are given programmatically (or manually).  Writing parameterized Terraform code (using variables for many of the customizable values), means that as an environment changes new values for the variables may be provided without requiring any modification to the underlying Terraform code.&lt;/p&gt;

&lt;p&gt;Here are some common use-cases for parameterizing code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multiple deployments of the same topology.  This could be for deploying separate development, staging and production environments that share identical topologies (but have unique names, compartments, CIDR blocks, etc.).&lt;/li&gt;
  &lt;li&gt;Passing secret/sensitive data in via variables.  Rather than hard-coding credentials, keys and other sensitive data in the Terraform code, this can be passed via variables.&lt;/li&gt;
  &lt;li&gt;Writing extensible modules in Terraform, where variables are used as inputs to the module, determining its behavior and/or setting resource attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;alert&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; NEVER commit secrets, credentials, keys and any other sensitive data to a git repo!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;types-of-variables&quot;&gt;Types of variables&lt;/h2&gt;

&lt;p&gt;There are two kinds of variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Input variables (variables)&lt;/li&gt;
  &lt;li&gt;Local values (locals)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;input-variables-variables&quot;&gt;Input variables (variables)&lt;/h3&gt;

&lt;p&gt;Most Terraform projects use variables in one way or another.  Variables are very common, and for good reason.  Variables are accessible within the entire project (or module, if you’re building projects made of one or more modules).&lt;/p&gt;

&lt;h3 id=&quot;local-values-locals&quot;&gt;Local values (locals)&lt;/h3&gt;

&lt;p&gt;There’s another kind of variable called a local variable (aka locals) which is not accessible to your entire project, but is limited to the context of a single Terraform file.  This means that if you define a local variable in a particular Terraform file, it will only be available to code within that same file (but not to code in other Terraform files).&lt;/p&gt;

&lt;h2 id=&quot;getting-the-contents-of-a-variable&quot;&gt;Getting the contents of a variable&lt;/h2&gt;

&lt;p&gt;To use a variable, prepend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var.&lt;/code&gt; at the beginning of the variable name.  Take for example the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var.tenancy_ocid&lt;/code&gt; used in the following VCN resource block:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oci_core_vcn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf_101&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.0/24&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tenancy_ocid&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;display_name&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tf-101&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dns_label&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tf101&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this looks familiar, it should - it’s borrowed from the &lt;a href=&quot;2-experiencing-terraform&quot;&gt;Experiencing Terraform&lt;/a&gt; tutorial!  This is how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tenancy_ocid&lt;/code&gt; variable is referenced (read and used).&lt;/p&gt;

&lt;h3 id=&quot;getting-the-contents-of-a-local&quot;&gt;Getting the contents of a local&lt;/h3&gt;

&lt;p&gt;To use a local (variable), simply prepend the local variable name with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local&lt;/code&gt;.  Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oci_core_vcn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tf_101&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tenancy_ocid&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;display_name&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tf-101&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dns_label&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tf101&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above example is setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cidr_block&lt;/code&gt; attribute to whatever is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cidr&lt;/code&gt; local.&lt;/p&gt;

&lt;h2 id=&quot;setting-variable-values&quot;&gt;Setting variable values&lt;/h2&gt;

&lt;p&gt;There are multiple ways to set the values of a variable.  Terraform uses the following order of precedence when setting the value of a variable (listed from the highest to lowest priority):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CLI arguments (-var and -var-file CLI parameters)&lt;/li&gt;
  &lt;li&gt;*.auto.tfvars&lt;/li&gt;
  &lt;li&gt;terraform.tfvars&lt;/li&gt;
  &lt;li&gt;Environment variables&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;setting-local-values-locals&quot;&gt;Setting local values (locals)&lt;/h3&gt;

&lt;p&gt;Local values are a little different than regular variables (which we’ll be looking at in the rest of this section).  Locals (aka local values) are set in the Terraform code itself.  A benefit of locals is — because they’re set within the Terraform code — they can be computed programmatically, granting the ability to use Terraform functions, reference to other variables, locals, and resources.&lt;/p&gt;

&lt;p&gt;Here’s an example of how locals are defined.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;locals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;comp_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;abcd.1234&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above example is just fictitious (and not even the most efficient method of doing this), but gives you an idea about how you’d set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comp_id&lt;/code&gt; local (variable).  Locals are defined within a plural &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locals&lt;/code&gt; block, but when referenced, are singular (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local.comp_id&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;via-the-command-line-interface&quot;&gt;Via the command-line interface&lt;/h3&gt;

&lt;p&gt;Terraform supports many command-line parameters, one of which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-var&lt;/code&gt; parameter which allows you to set the value of a variable when you run Terraform.  Here’s an example of how you might set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compartment_id&lt;/code&gt; variable using the command-line.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform plan &lt;span class=&quot;nt&quot;&gt;-var&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'compartment_id=abcd.1234'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or alternatively, you can use the following formatting.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform plan &lt;span class=&quot;nt&quot;&gt;-var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;compartment_id=abcd.1234&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can set one or more variables using this technique.  This is one way to set variables, but it’s a bit tedious because it can result in a really long command when running Terraform (if there are a lot of variables being set).  This would need to be used every time you want to run Terraform!&lt;/p&gt;

&lt;h3 id=&quot;variable-files&quot;&gt;Variable files&lt;/h3&gt;

&lt;p&gt;Files ending in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tfvars&lt;/code&gt; can be used to set the value of variables.  You can tell Terraform which files to read at run-time with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-var-file&lt;/code&gt; parameter or you can let it auto-load files (based on their filename).&lt;/p&gt;

&lt;p&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file exists in the working directory, Terraform will read it and set the variable values that are given there.  Here’s a sample &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your_compartment_OCID_here&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt;           &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;us-phoenix-1&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cidr&lt;/span&gt;             &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.16.0.0/20&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are setting variable values (note that there’s no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var.&lt;/code&gt; prefix used).  Terraform implicitly uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file for setting variable values.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file is statically read, meaning that there’s no computation that takes place.  Terraform does not reference other variables, resources or other Terraform functions.  It reads only static values.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file can often be used for setting environment-specific settings.  It is usually not committed to git repos (at least alongside the Terraform code), as its values might determine the characteristics for the environment.&lt;/p&gt;

&lt;h3 id=&quot;autotfvars&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.auto.tfvars&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;You can specify as many files as you’d like that end in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.auto.tfvars&lt;/code&gt; and Terraform will gladly read these and set variable values accordingly.  This allows you to set different variable definitions between different files.  For instance, it might make sense to set the variable definitions as-follows (this is just an example, by no means the only way).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network.auto.tfvars&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storage.auto.tfvars&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute.auto.tfvars&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grouping variable assignments like this allows a person to better navigate between variables, especially if there’s a large number of variables.&lt;/p&gt;

&lt;h3 id=&quot;via-environment-variables&quot;&gt;Via environment variables&lt;/h3&gt;

&lt;p&gt;Terraform is smart enough to look at the environment variables at run-time.  If there are any that begin with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TF_VAR_&lt;/code&gt; (the full environment variable would be: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TF_VAR_&amp;lt;variable_name&amp;gt;&lt;/code&gt;), Terraform will assign the value to the given variable.&lt;/p&gt;

&lt;p&gt;Here’s an example of how to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compartment_id&lt;/code&gt; variable on a MacOS/Linux system.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF_VAR_compartment_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your_compartment_OCID_here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This same environment variable might be set as follows on Windows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setx TF_VAR_compartment_id &amp;lt;your_compartment_OCID_here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;via-user-interactive-prompts&quot;&gt;Via user-interactive prompts&lt;/h3&gt;

&lt;p&gt;If a variable is not given a value, Terraform will resort to asking the user to provide it at run-time.  Terraform cannot proceed without knowing what value to use.&lt;/p&gt;

&lt;p&gt;This is annoying and can be tedious (especially if there are lots of undefined variables), however there are times when this might make perfect sense and be a desirable behavior.  In situations where the user should be asked for a value (such as for a confirmation prompt), this can be a good solution.&lt;/p&gt;

&lt;h2 id=&quot;defining-variables&quot;&gt;Defining variables&lt;/h2&gt;

&lt;p&gt;To define the existence of a variable, simply provide the following anywhere in the Terraform code:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;compartment_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s common practice to place variable definitions in a single file: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;.  This allows for easier management of variable definitions (having them in one place).&lt;/p&gt;

&lt;p&gt;Besides the name of the variable, there are several different attributes you can set for a variable, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;type (some of the common types will be discussed shortly)&lt;/li&gt;
  &lt;li&gt;description (it’s nice to let people know how this variable is used)&lt;/li&gt;
  &lt;li&gt;default&lt;/li&gt;
  &lt;li&gt;sensitive&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;default-values&quot;&gt;Default values&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; attribute is important to know about, as its behavior is multi-purpose.  Notice how there’s no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required&lt;/code&gt; attribute?  If a variable does &lt;em&gt;not&lt;/em&gt; have a default value, Terraform will require the variable value to be set.  This means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; not only allows you to provide a default, but it can also make a variable “optional” (sort of).  This is really just a side effect of providing a value. Every variable defined &lt;em&gt;must&lt;/em&gt; have a value.  Giving a default value (even if empty, such as a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;) keeps Terraform from “bugging” the operator, which gives the impression that it’s &lt;em&gt;not&lt;/em&gt; required.  It’s a matter of how you look at it.&lt;/p&gt;

&lt;p&gt;Some variables might best be left blank (so it’s very obvious if the user running Terraform doesn’t set it to a specific value).  Often times it’s nice to have “sane defaults” set so that a reasonable default value is used on a variable, minimizing the amount of inputs that must be provided.  When a variable is given a default value, the default value is used unless it is overridden (with a value explicitly set).&lt;/p&gt;

&lt;p&gt;To define a default value, add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; attribute to the variable definition.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;compartment_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;abcd.1234&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above example, unless a value is explicitly provided, the default value of “abcd.1234” will be used for the the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compartment_id&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3 id=&quot;sensitive-variables&quot;&gt;Sensitive variables&lt;/h3&gt;

&lt;p&gt;If you set the sensitive attribute of a variable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, Terraform tries to minimize displaying the value to the user. This is not a guarantee that it’s not accessible to the user or that it won’t be shown on the screen.  See the &lt;a href=&quot;https://www.terraform.io/docs/language/values/variables.html#suppressing-values-in-cli-output&quot;&gt;Terraform documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;api_token&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sensitive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above example, the visibility of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api_token&lt;/code&gt; variable is minimized through the use of setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensitive&lt;/code&gt; attribute to true for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api_token&lt;/code&gt; variable.&lt;/p&gt;

&lt;h2 id=&quot;variable-types&quot;&gt;Variable Types&lt;/h2&gt;

&lt;h3 id=&quot;strings&quot;&gt;Strings&lt;/h3&gt;
&lt;p&gt;The variables used up to this point have been string values.  String values are enclosed by double-quotes (“).&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your_compartment_OCID_here&amp;gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s how this is defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tenancy_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Strings are common, but are by no means the only kind that you can use.&lt;/p&gt;

&lt;h3 id=&quot;numbers&quot;&gt;Numbers&lt;/h3&gt;
&lt;p&gt;Numbers are numeric values that are not surrounded by quotes.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;number_of_computes&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s how this might be defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;number_of_computes&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;boolean&quot;&gt;Boolean&lt;/h3&gt;

&lt;p&gt;Like many other languages, Terraform supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; boolean values.  Here’s an example of a Boolean variable being set.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;create_computes&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_computes&lt;/code&gt; variable is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.  These can be useful for many things, including specifying the desired behavior (like this example, where it might be possible to not create the computes if the value was set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here’s how this might be defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create_computes&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;There are times when a list is needed.  Terraform lists are similar to arrays in many other languages.  A Terraform list is an ordered lists of values of a given type (could be string values, number values, etc.).  Here’s an example of a string list.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;compute_names&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;web1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;web2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db2&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s how this might be defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;compute_names&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To reference a list element, use the index of the item.  Terraform is zero-indexed, so the first item is index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, the second item is index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, and so on.  Look at how you might reference the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db1&lt;/code&gt; value (from the above list example, being element &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;, index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compute_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# this equals &quot;db1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;maps&quot;&gt;Maps&lt;/h3&gt;

&lt;p&gt;When the power of a key-value relationship is needed, Terraform maps are here to help!  Maps are similar to hashes in some other languages, allowing you to have multiple keys, with each key having a value.  Here’s an example of a map.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;compute_shapes&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;web1&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;VM.Standard2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;web2&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;VM.Standard2.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;app1&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;VM.Standard2.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;app2&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;VM.Standard2.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;db1&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;VM.Standard2.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;db2&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;VM.Standard2.8&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s how this is defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;compute_shapes&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that it is given what kind of values to expect in the map.  This could’ve been a map of numbers (instead of strings) or another valid variable type.&lt;/p&gt;

&lt;p&gt;To reference a map element, use the item key.  Here’s how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db1&lt;/code&gt; value might be referenced.&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compute_shapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;db1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# this equals &quot;VM.Standard2.8&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sample-variable-definitions&quot;&gt;Sample Variable Definitions&lt;/h2&gt;

&lt;p&gt;Here’s an example of a “toggle” variable (a boolean, which is either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;extra_power&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s an example of a more complex variable (taken from &lt;a href=&quot;https://github.com/oracle-devrel/terraform-oci-ocloud-landing-zone/blob/main/component/network_domain/input.tf&quot;&gt;https://github.com/oracle-devrel/terraform-oci-ocloud-landing-zone/blob/main/component/network_domain/input.tf&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;subnet&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;                  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;prohibit_public_ip_on_vnic&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;dhcp_options_id&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;route_table_id&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;                   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Parameters for each subnet to be managed&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above example, the subnet variable contains several attributes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cidr_block&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prohibit_public_ip_on_vnic&lt;/code&gt;, etc.), which are of different types.  This is just one example of how complex variables can be crafted.  Don’t worry about this though, as complex variables are optional (you can stick with single-value variables for most use-cases).&lt;/p&gt;

&lt;p&gt;These are just a few examples.  You can get really crazy with variables!  Have fun with them, be creative, and remember that variables largely define the input interface for the Terraform environment.  Look at the &lt;a href=&quot;https://www.terraform.io/docs/language/values/variables.html&quot;&gt;Terraform language documentation on input variables&lt;/a&gt; to discover some of the other variable types and Terraform variable functionality.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Tim Clegg</name>
        
        
      </author>

      
        
          <category term="iac" />
        
          <category term="opensource" />
        
      

      
        <category term="open-source" />
      
        <category term="terraform" />
      
        <category term="iac" />
      
        <category term="devops" />
      
        <category term="beginner" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">Understanding the basics of Terraform</title>
      <link href="https://cool.devo.build/collections/tutorials/tf-101/3-understanding-terraform-basics" rel="alternate" type="text/html" title="Understanding the basics of Terraform" />
      <published>2021-10-14T08:13:00+00:00</published>
      <updated>2021-10-14T08:13:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/tf-101/3-understanding-terraform-basics</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/tf-101/3-understanding-terraform-basics">&lt;p&gt;In our &lt;a href=&quot;1-why-iac&quot;&gt;first lesson&lt;/a&gt;, we covered why you should care about IaC.  We also touched on just a few of the many tools in this space.  Finally, we’ve decided to narrow our focus down to Terraform.  The &lt;a href=&quot;2-experiencing-terraform&quot;&gt;last lesson&lt;/a&gt; took you through a really quick and simple scenario using Terraform.  It was short but powerful, and hopefully helped you understand a bit of why Terraform (and IaC) is so cool.  This lesson will take you through some of the basic concepts you should know to effectively work with Terraform.&lt;/p&gt;

&lt;h2 id=&quot;major-terraform-components&quot;&gt;Major Terraform Components&lt;/h2&gt;

&lt;p&gt;In the IaC world, resources are defined using code.  Terraform follows a &lt;em&gt;declarative&lt;/em&gt; language model, meaning that you tell it where you want to be after it executes and it figures out what’s needed to get there. Terraform doesn’t need to be told “do this, then do this, then finish with this”, as is common with many procedural languages. You simply tell it where you want it to end and it’ll map out the path.  Most of the time it’s able to figure out the right steps.  Occasionally it’ll need some help, but we’ll talk a little about that in another tutorial.&lt;/p&gt;

&lt;p&gt;Terraform has a couple of core components that you should know about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Terraform executable&lt;/li&gt;
  &lt;li&gt;Terraform provider(s)&lt;/li&gt;
  &lt;li&gt;Terraform code&lt;/li&gt;
  &lt;li&gt;Terraform state&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;terraform-executable&quot;&gt;Terraform executable&lt;/h2&gt;

&lt;p&gt;The Terraform executable can be easily downloaded and installed on many different platforms.  Check out the &lt;a href=&quot;https://www.terraform.io/downloads.html&quot;&gt;Terraform downloads page&lt;/a&gt; for the Terraform CLI binaries for different platforms.&lt;/p&gt;

&lt;p&gt;If you’re using Linux, it’s possible that Terraform might exist in your favorite package manager (look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum install terraform&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt-get install terraform&lt;/code&gt;). Oracle Linux makes it super simple to install Terraform (check out the &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/terraforminstallation.htm&quot;&gt;Oracle docs&lt;/a&gt; for more info).  Using Oracle Linux is super easy (just use Yum). If you’re not using Oracle Linux, you’ll likely need to configure your package manager (see &lt;a href=&quot;https://www.terraform.io/docs/cli/install/yum.html&quot;&gt;RHEL/Fedora Yum docs&lt;/a&gt; or &lt;a href=&quot;https://www.terraform.io/docs/cli/install/apt.html&quot;&gt;Debian/Ubuntu APT docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;On MacOS, simply download the binary and place it somewhere in your path.  So long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform -v&lt;/code&gt; works from a terminal, you should be ready to go! You can also use &lt;a href=&quot;https://brew.sh&quot;&gt;homebrew&lt;/a&gt;, which makes it as easy as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install terraform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are many different commands that Terraform accepts.  Here are some of the more common ones frequently used:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform init&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;This must be run at least once for a Terraform project.  This is when Terraform downloads any needed providers, sets up the state (if it doesn’t already exist), etc.&lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Prompts Terraform to do a dry run, to determine what it would do if it was to apply.  No changes are made.  It simply tells you what it thinks should be done.  It’s a good idea to always run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; and review the output (before applying), to make sure that you fully understand what Terraform is saying must be done.&lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Changes are made with this command.  It’ll by default show you the same output as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt;, asking you if you’d like to continue.  There are ways to short-circuit this and always apply, but when running Terraform by hand, it’s a good idea to always review what things it plans to do (before it does them).&lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform console&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Gives you an interactive console where you can enter different Terraform commands. Particularly useful for building and testing logic in Terraform code.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;terraform-providers&quot;&gt;Terraform provider(s)&lt;/h2&gt;

&lt;p&gt;Providers allow Terraform to interact with different platforms.  This is what bridges the gap between the Terraform code and a given platform (such as OCI).  One or more providers can be used at any time.  The OCI provider translates the Terraform code to how Terraform needs to interact with the OCI API, for instance.  Many clouds have Terraform providers, allowing you to define resources that are specific to a cloud using a standard format, tool and language.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/oci/latest/docs&quot;&gt;the OCI Terraform provider documentation&lt;/a&gt; for an idea of the different kinds of resources that can be managed with it.  We’ll walk through a really simple example at the end of this tutorial, so don’t sweat it if this seems a little overwhelming!  Hang in there and it’ll be worth it (it’ll come together).&lt;/p&gt;

&lt;p&gt;You will need to tell Terraform about which providers you’ll be using in your code.  Providers are typically referenced in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider&lt;/code&gt; blocks.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; A block of Terraform code is something that’s including multiple lines of code enclosed within an opening (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt;) and closing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt;) curly brackets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at how to tell Terraform we want to use the OCI provider:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;terraform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;required_version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 0.14.0&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;required_providers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;oci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hashicorp/oci&quot;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 4.39.0&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;oci&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;InstancePrincipal&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt; block is telling Terraform to download and include specific providers (those within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required_providers&lt;/code&gt; block).  In this case, we’re including the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oci&lt;/code&gt; provider, specifically version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.39.0&lt;/code&gt; or greater.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required_providers&lt;/code&gt; portion of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt; block is optional but nice to include as it allows you to constrain the version and source of a given provider.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The OCI provider block contains information that’s specific to the provider.  In this case, we’re telling the OCI provider which region to use and asking it to authenticate against the OCI API using &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/callingservicesfrominstances.htm&quot;&gt;Instance Principals&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt; line in the OCI provider block is optional. It’s one way of authenticating (using &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/callingservicesfrominstances.htm&quot;&gt;Instance Principals&lt;/a&gt;), but certainly not the only way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although it’s possible to manually download and install Terraform providers, by default Terraform will automatically download and install (manage) providers for you.  This is accomplished by running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform init&lt;/code&gt; command from the directory containing your Terraform code.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Managed Terraform services such as &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/ResourceManager/home.htm&quot;&gt;OCI Resource Manager (ORM)&lt;/a&gt; do not require you to go through any Terraform initialization process.  This is managed for you by ORM.  This step is needed when running Terraform from your own computer (or server).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;terraform-code&quot;&gt;Terraform Code&lt;/h2&gt;

&lt;p&gt;Terraform uses a proprietary &lt;a href=&quot;https://www.terraform.io/docs/language/index.html&quot;&gt;configuration language&lt;/a&gt;.  Like any language, it’s reasonable to expect a slight learning curve when you’re first starting out, but once you gain some familiarity and experience with it, expect it to grow on you.&lt;/p&gt;

&lt;p&gt;It’s highly recommended to at least skim the &lt;a href=&quot;https://www.terraform.io/docs/language/index.html&quot;&gt;Terraform configuration language documentation&lt;/a&gt;, gaining some familiarity with the basic concepts, structural components, and functions available in the language.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Terraform has undergone some significant changes to the Terraform configuration language over the past several years.  If you see code that is written for Terraform v0.11 (or earlier), you’ll likely need to update it to a more recent version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the code, you’ll likely define a combination of variables (user provided input), locals (local variables), outputs (values shown as output after running Terraform), providers, and resources.  Most all of the other code elements are engineered to support the management of resources.  This is really what gets changed in OCI (or another environment, depending on the providers you’re using and the resources you’re managing) when Terraform is run.  Whether declaring a single resource or iteratively creating many resources via a loop construct, resources are typically what we’re trying to manage with Terraform.&lt;/p&gt;

&lt;h2 id=&quot;a-terraform-project&quot;&gt;A Terraform Project&lt;/h2&gt;

&lt;p&gt;A typical Terraform project can be broken into familiar constructs typical to many applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inputs&lt;/li&gt;
  &lt;li&gt;Outputs&lt;/li&gt;
  &lt;li&gt;Logic&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inputs&quot;&gt;Inputs&lt;/h3&gt;

&lt;p&gt;Terraform receives input via the usage of variables.  Variables may be set via command-line parameters, static files or environment variables.  There are a lot of facets to mastering the usage of variables, so we’ll cover these in greater detail in &lt;a href=&quot;4-variables&quot;&gt;another lesson&lt;/a&gt;.  For now, know that each variable must be given a name (defined with a variable block) and value (set to a value), like the following simple example:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;region&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above variable example is the most simplistic variable definition. They can get more complex, though.  If you want to jump ahead, feel free to look ahead to the &lt;a href=&quot;4-variables&quot;&gt;lesson on variables&lt;/a&gt; and check out the &lt;a href=&quot;(https://www.terraform.io/docs/language/values/variables.html)&quot;&gt;Terraform variable documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where should you place your variables (in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tf&lt;/code&gt; file)?  Variables are most often defined in a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;.  Pretty self-explanatory, right?  This isn’t required, but is good form and common practice for all but really small projects.  Most of the time it’s a good idea to make the filename specific to the type of resources defined in it.&lt;/p&gt;

&lt;p&gt;To dig in deeper, check out the excellent &lt;a href=&quot;https://www.terraform.io/docs/language/values/variables.html&quot;&gt;Terraform variables documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;outputs&quot;&gt;Outputs&lt;/h3&gt;

&lt;p&gt;There are times when Terraform needs to provide data about the environment back to the display.  For example, when a compute instance is deployed, a private IP address may be specified.  If it’s not specified, OCI will pick an IP address for us (from the Subnet the instance is being deployed in).  Wouldn’t it be nice to be able to see this private IP address?  Many different attributes are exported by Terraform resources, allowing you to easily examine them via the usage of outputs.&lt;/p&gt;

&lt;p&gt;Outputs are technically called “output variables.”  These are shown at the end of running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; (running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; won’t show outputs).  Here’s an example of an output:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcn_state&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The state of the VCN.&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oci_core_vcn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf_101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Outputs can be defined in any Terraform code file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.tf&lt;/code&gt;). However, it’s a good idea to get into the practice of separating Terraform code into logical files so the code base is easier to navigate.  It’s recommended to use the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outputs.tf&lt;/code&gt; for this purpose (keeps it logical).&lt;/p&gt;

&lt;p&gt;The value of an output can be any programmatic calculation supported in Terraform code.  See this at work with the following example:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;two_plus_two&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is super simple - just adding two numbers together.  You can use many  &lt;a href=&quot;https://www.terraform.io/docs/language/functions/index.html&quot;&gt;functions in Terraform&lt;/a&gt;; let your mind wander a bit around what you might be able to do.  String substitutions, merging, changes, calculating hashes, etc.  The world’s your oyster!&lt;/p&gt;

&lt;p&gt;Coercing outputs can be particularly valuable when using Terraform in automated pipelines as well as when running it manually (so users can see useful data).&lt;/p&gt;

&lt;h3 id=&quot;logic&quot;&gt;Logic&lt;/h3&gt;

&lt;p&gt;Terraform provides many different functions which allow you to embed logic and perform some rather complex computations.  Need to loop (iterate) through a list or map?  You’re covered!  How about concatenating strings (or many other kind of string manipulations)?  Got it.  If-then-else logic?  Yep, it’s there.  Need to do some CIDR calculations?  There are functions for that.  Check out the &lt;a href=&quot;https://www.terraform.io/docs/language/functions/index.html&quot;&gt;Terraform functions&lt;/a&gt;, &lt;a href=&quot;https://www.terraform.io/docs/language/expressions/conditionals.html&quot;&gt;Terraform conditional expressions&lt;/a&gt; and &lt;a href=&quot;https://www.terraform.io/docs/language/expressions/for.html&quot;&gt;Terraform &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; expressions&lt;/a&gt; for more information.  It’s well worth skimming through, even if just to gain some basic familiarity with some of what’s available and possible.&lt;/p&gt;

&lt;h2 id=&quot;terraform-state&quot;&gt;Terraform State&lt;/h2&gt;

&lt;p&gt;When interacting with an environment, there are three main components Terraform needs (in addition to the Terraform binary):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Terraform code&lt;/li&gt;
  &lt;li&gt;Terraform state&lt;/li&gt;
  &lt;li&gt;Environment being managed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Terraform uses a lot of intelligence to map out relationships between managed resources.  Many applications rely on a local database to store information needed by the application.  Terraform’s no different, and is very transparent in how it manages its application content, storing what’s needed in a local JSON file (by default).&lt;/p&gt;

&lt;p&gt;The state is where Terraform caches a copy of what it knows about the environment.  Details about the managed resources are stored here, in verbose form.  Inputs (variable values) are also cached here.  State files should be carefully guarded as it’s possible to have secrets or other sensitive data stored in them.  Even though a variable might be marked as sensitive, Terraform can store the contents in the state file.  Although it might not show via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;, it might be there “in the open” in the state file.&lt;/p&gt;

&lt;p&gt;When Terraform runs, it will update the state (with what actually exists in the environment being managed) and compare the state against the code.  Any deltas (variances between the code and state) will be marked as requiring a remediation (change that must be made to bring the current resource state to where the code is asking for it).&lt;/p&gt;

&lt;p&gt;It’s important to always use the latest copy of the state, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; might update the state file.  This is particularly important when sharing the management responsibilities for a single environment among multiple people.  Each environment has a &lt;em&gt;single&lt;/em&gt; state file.  If the state file becomes corrupted or out-of-sync, Terraform can do weird and unexpected things.  It’s really not good — carefully guard your state file!&lt;/p&gt;

&lt;p&gt;The state is stored locally within the project directory by default (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform.tfstate&lt;/code&gt;).  Backends may be defined which would tell Terraform to store the state in a different location.  Many different kinds of backends are supported - check out the &lt;a href=&quot;https://www.terraform.io/docs/language/settings/backends/index.html&quot;&gt;backend documentation&lt;/a&gt; for more information.  For this tutorial, we’ll be sticking with keeping the state local.  For production deployments, many customers will find the use of &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/ResourceManager/home.htm&quot;&gt;OCI Resource Manager&lt;/a&gt; of benefit, as it maintains the Terraform state file for each stack automatically.  Others might leverage OCI Object Storage as a backend, while some might prefer using git.&lt;/p&gt;

&lt;h2 id=&quot;moving-forward&quot;&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;Now that you understand some of the basic components used in a Terraform project, let’s dive into &lt;a href=&quot;4-variables&quot;&gt;variables in the next lesson&lt;/a&gt;.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Tim Clegg</name>
        
        
      </author>

      
        
          <category term="iac" />
        
          <category term="opensource" />
        
      

      
        <category term="open-source" />
      
        <category term="terraform" />
      
        <category term="iac" />
      
        <category term="devops" />
      
        <category term="beginner" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">How to Deploy a Python Flask Application in a Kubernetes cluster</title>
      <link href="https://cool.devo.build/collections/tutorials/deploy-flask-app-cloud-shell" rel="alternate" type="text/html" title="How to Deploy a Python Flask Application in a Kubernetes cluster" />
      <published>2021-10-11T01:00:00+00:00</published>
      <updated>2021-10-11T01:00:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/deploy-flask-app-cloud-shell</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/deploy-flask-app-cloud-shell">&lt;p&gt;In this tutorial, you use an Oracle Cloud Infrastructure account to set up a Kubernetes cluster. Then, you create a Python application with a Flask framework. Finally, you deploy your application to your cluster using Cloud Shell.&lt;/p&gt;

&lt;p&gt;Key tasks include how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a Compartment.&lt;/li&gt;
  &lt;li&gt;Set up a Kubernetes cluster on OCI.&lt;/li&gt;
  &lt;li&gt;Build a Python application in a Flask framework.&lt;/li&gt;
  &lt;li&gt;Create a Docker image.&lt;/li&gt;
  &lt;li&gt;Push your image to OCI Container Registry.&lt;/li&gt;
  &lt;li&gt;Use Cloud Shell to deploy your Docker application to your cluster.&lt;/li&gt;
  &lt;li&gt;Connect to your application from the internet.
&lt;img src=&quot;assets/flask-shell-diagram.png&quot; alt=&quot;A diagram of the components needed to run a Flask app on Kubernetes cluster, on Oracle Cloud Infrastructure&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For additional information, see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/home/&quot;&gt;More on Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/iaas/Content/ContEng/Concepts/contengoverview.htm&quot;&gt;OCI Container Engine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/iaas/Content/Registry/Concepts/registryoverview.htm&quot;&gt;OCI Container Registry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/iaas/Content/API/Concepts/cloudshellintro.htm&quot;&gt;Cloud Shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;before-you-begin&quot;&gt;Before You Begin&lt;/h2&gt;

&lt;p&gt;To successfully perform this tutorial, you must have the following:&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;Free trial&lt;/strong&gt; or a &lt;strong&gt;paid&lt;/strong&gt; Oracle Cloud Infrastructure account. You can sign up &lt;a href=&quot;https://signup.cloud.oracle.com/?language=en&amp;amp;sourceType=:ow:de:te::::RC_WWMK210625P00048:Free&amp;amp;intcmp=:ow:de:te::::RC_WWMK210625P00048:Free&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Cloud Shell or the following
    &lt;ul&gt;
      &lt;li&gt;JDK 8+&lt;/li&gt;
      &lt;li&gt;Python 3.6.8+&lt;/li&gt;
      &lt;li&gt;Kubectl 1.18.10+&lt;/li&gt;
      &lt;li&gt;Apache Maven 3.5+&lt;/li&gt;
      &lt;li&gt;Docker 19.0.11+&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;The advantage of using Cloud Shell is all the required tools to manage your application are already installed and ready to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;prepare&quot;&gt;Prepare&lt;/h2&gt;

&lt;p&gt;Prepare your environment to create and deploy your application.&lt;/p&gt;

&lt;h3 id=&quot;check-your-service-limits&quot;&gt;Check your Service Limits&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu, and click Governance and Administration. Under Governance, click Limits, Quotas and Usage.&lt;/li&gt;
  &lt;li&gt;Find your service limit for &lt;strong&gt;Regions&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; Regions&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; Tenancy&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Resource:&lt;/strong&gt; Subscribed region count&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Find service limit:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscribed-region-count&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Service Limit:&lt;/strong&gt; minimum 2&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Find your available &lt;strong&gt;Compute&lt;/strong&gt; &lt;strong&gt;core count&lt;/strong&gt; for the &lt;strong&gt;VM.Standard.E2.1&lt;/strong&gt; shape:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; Compute&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;first-availability-domain&amp;gt;&lt;/code&gt;. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EMlr:US-ASHBURN-AD-1&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Resource:&lt;/strong&gt; &lt;strong&gt;Cores&lt;/strong&gt; for Standard.E2 based VM and BM Instances&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Find available core count:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard-e2-core-count&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Available:&lt;/strong&gt; minimum 1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Repeat for &lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;second-availability-domain&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;third-availability-domain&amp;gt;&lt;/code&gt;. Each region must have at least one core available for this shape.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Find out if you have &lt;strong&gt;50 GB&lt;/strong&gt; of &lt;strong&gt;Block Volume&lt;/strong&gt; available:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; Block Volume&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;first-availability-domain&amp;gt;&lt;/code&gt;. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EMlr:US-ASHBURN-AD-1&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Resource&lt;/strong&gt; Volume Size (GB)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Find available core count:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total-storage-gb&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Available:&lt;/strong&gt; minimum 50&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Repeat for &lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;second-availability-domain&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;third-availability-domain&amp;gt;&lt;/code&gt;. Each region must have at least 50 GB of block volume available.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Find out how many &lt;strong&gt;Flexible Load Balancers&lt;/strong&gt; you have available:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; LBaaS&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-region&amp;gt;&lt;/code&gt;. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;us-ashburn-1&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Resource:&lt;/strong&gt; &lt;blank&gt;&lt;/blank&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Find the count for the following shapes
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lb-flexible-bandwidth-count&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Available:&lt;/strong&gt; minimum 1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;This tutorial creates three compute instances with a &lt;strong&gt;VM.Standard.E2.1&lt;/strong&gt; shape for the cluster nodes. To use another shape, filter for its &lt;strong&gt;core count&lt;/strong&gt;. For example, for &lt;strong&gt;VM.Standard2.4&lt;/strong&gt;, filter for &lt;strong&gt;Cores for Standard2 based VM and BM Instances&lt;/strong&gt; and get the &lt;strong&gt;count&lt;/strong&gt;.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;For a list of all shapes, see &lt;a href=&quot;https://docs.oracle.com/iaas/Content/Compute/References/computeshapes.htm#vmshapes__vm-standard&quot;&gt;VM Standard Shapes&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;This tutorial creates a load balancer with a &lt;strong&gt;flexible&lt;/strong&gt; shape. To use another bandwidth, filter for its &lt;strong&gt;count&lt;/strong&gt;, for example &lt;strong&gt;100-Mbps bandwidth&lt;/strong&gt; or &lt;strong&gt;400-Mbps bandwidth&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;create-an-authorization-token&quot;&gt;Create an Authorization Token&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;In the Console’s top navigation bar, click the &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar).&lt;/li&gt;
  &lt;li&gt;Click your username.&lt;/li&gt;
  &lt;li&gt;Click Auth Tokens.&lt;/li&gt;
  &lt;li&gt;Click Generate Token.&lt;/li&gt;
  &lt;li&gt;Give it a description.&lt;/li&gt;
  &lt;li&gt;Click Generate Token.&lt;/li&gt;
  &lt;li&gt;Copy the token and &lt;strong&gt;save&lt;/strong&gt; it.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Close.&lt;/p&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Ensure that you save your token&lt;/strong&gt; right after you create it. You have no access to it later.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;gather-required-information&quot;&gt;Gather Required Information&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Collect the following credential information from the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Tenancy name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar) and find your **Tenancy:&lt;tenancy-name&gt;**.&lt;/tenancy-name&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Tenancy namespace:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-namespace&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar).&lt;/li&gt;
          &lt;li&gt;Click **Tenancy: &lt;tenancy-name&gt;**.&lt;/tenancy-name&gt;&lt;/li&gt;
          &lt;li&gt;Copy the value for &lt;strong&gt;Object Storage Namespace&lt;/strong&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;For some accounts, tenancy name and namespace differ. Ensure that you use namespace in this tutorial.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Tenancy OCID:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-ocid&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar), then click **Tenancy:&lt;tenancy-name&gt;**, and copy OCID.&lt;/tenancy-name&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Username:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;user-name&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;User OCID:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;user-ocid&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar), then click &lt;strong&gt;User Settings&lt;/strong&gt;, and copy OCID.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find your region information.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Region:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;region-identifier&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;In the Console’s top navigation bar, find your region. Example: &lt;strong&gt;US East (Ashburn)&lt;/strong&gt;.&lt;/li&gt;
          &lt;li&gt;Find your &lt;strong&gt;Region Identifier&lt;/strong&gt; from the table in &lt;a href=&quot;https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm&quot;&gt;Regions and Availability Domains&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;us-ashburn-1&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Region Key:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;region-key&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Find your &lt;strong&gt;Region Key&lt;/strong&gt; from the table in &lt;a href=&quot;https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm&quot;&gt;Regions and Availability Domains&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iad&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy your authentication token from &lt;strong&gt;Create an Authentication Token&lt;/strong&gt; section.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Auth Token:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;auth-token&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-up-a-cluster&quot;&gt;Set Up a Cluster&lt;/h2&gt;

&lt;p&gt;Install and configure management options for your Kubernetes cluster. Later, deploy your application to this cluster.&lt;/p&gt;

&lt;h3 id=&quot;add-compartment-policy&quot;&gt;Add Compartment Policy&lt;/h3&gt;

&lt;p&gt;If your username is in the &lt;strong&gt;Administrators&lt;/strong&gt; group, then skip this section. Otherwise, have your administrator add the following policy to your tenancy:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allow group &amp;lt;the-group-your-username-belongs&amp;gt; to manage compartments in tenancy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this privilege, you can create a compartment for all the resources in your tutorial.&lt;/p&gt;

&lt;h3 id=&quot;steps-to-add-the-policy&quot;&gt;Steps to Add the Policy&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;In the Console’s top navigation bar, open the &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar).&lt;/li&gt;
  &lt;li&gt;Click your username.&lt;/li&gt;
  &lt;li&gt;In the left pane, click Groups.&lt;/li&gt;
  &lt;li&gt;In a notepad, copy the &lt;strong&gt;Group Name&lt;/strong&gt; that your username belongs.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Identity &amp;amp; Security&lt;/strong&gt;. Under &lt;strong&gt;Identity&lt;/strong&gt;, click &lt;strong&gt;Policies&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click Create Policy.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill in the following information:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manage-compartments&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Allow the group &amp;lt;the-group-your-username-belongs&amp;gt; to list, create, update, delete and recover compartments in the tenancy.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Policy Builder&lt;/strong&gt;, click Show Manual Editor.&lt;/li&gt;
  &lt;li&gt;Paste in the following policy:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allow group &amp;lt;the-group-your-username-belongs&amp;gt; to manage compartments in tenancy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Click Create.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compartments&lt;/code&gt; resource-type in &lt;a href=&quot;https://docs.oracle.com/iaas/Content/Identity/Reference/iampolicyreference.htm#Identity&quot;&gt;Verbs + Resource-Type Combinations for IAM&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-a-compartment&quot;&gt;Create a Compartment&lt;/h3&gt;

&lt;p&gt;Create a compartment for the resources that you create in this tutorial.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Identity &amp;amp; Security&lt;/strong&gt;. Under &lt;strong&gt;Identity&lt;/strong&gt;, click &lt;strong&gt;Compartments&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click Create Compartment.&lt;/li&gt;
  &lt;li&gt;Fill in the following information:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-compartment-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compartment for &amp;lt;your-description&amp;gt;.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Parent Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click Create Compartment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; &lt;a href=&quot;https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#To&quot;&gt;Create a compartment&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-resource-policy&quot;&gt;Add Resource Policy&lt;/h3&gt;

&lt;p&gt;If your username is in the &lt;strong&gt;Administrators&lt;/strong&gt; group, then skip this section. Otherwise, have your administrator add the following policy to your tenancy:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allow group &amp;lt;the-group-your-username-belongs&amp;gt; to manage all-resources in compartment &amp;lt;your-compartment-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this privilege, you can &lt;strong&gt;manage all the resources&lt;/strong&gt; in your &lt;strong&gt;compartment&lt;/strong&gt;, essentially giving you administrative rights in that compartment.&lt;/p&gt;

&lt;h3 id=&quot;steps-to-add-the-policy-1&quot;&gt;Steps to Add the Policy&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Identity &amp;amp; Security&lt;/strong&gt;. Under &lt;strong&gt;Identity&lt;/strong&gt;, click &lt;strong&gt;Policies&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select your compartment from the Compartment list.&lt;/li&gt;
  &lt;li&gt;Click Create Policy.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill in the following information:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manage-&amp;lt;your-compartment-name&amp;gt;-resources&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Allow users to list, create, update, and delete resources in &amp;lt;your-compartment-name&amp;gt;.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Policy Builder&lt;/strong&gt;, select the following choices:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Policy use cases:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compartment Management&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Common policy templates:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Let compartment admins manage the compartment&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Groups:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;the-group-your-username-belongs&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click Create.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/iaas/Content/Identity/Concepts/commonpolicies.htm&quot;&gt;Common Policies&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-a-cluster-with-quick-create&quot;&gt;Create a Cluster with ‘Quick Create’&lt;/h3&gt;

&lt;p&gt;Create a cluster with default settings and new network resources through the ‘Quick Create’ workflow.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sign in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click&lt;strong&gt;Kubernetes Clusters (OKE)&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click Create Cluster.&lt;/li&gt;
  &lt;li&gt;Select Quick Create.&lt;/li&gt;
  &lt;li&gt;Click Launch Workflow.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;Create Cluster&lt;/strong&gt; dialog is displayed. Fill in the following information.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-cluster-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-compartment-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Kubernetes Version:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;take-default&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Kubernetes API Endpoint:&lt;/strong&gt; Public Endpoint 
 The Kubernetes cluster is hosted in a public subnet with an auto-assigned public IP address.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Kubernetes Worker Nodes:&lt;/strong&gt; Private Workers 
 The Kubernetes worker nodes are hosted in a private subnet.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Shape:&lt;/strong&gt; VM.Standard.E2.1&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Number of Nodes:&lt;/strong&gt; 3&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Specify a custom boot volume size:&lt;/strong&gt; Clear the check box.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt;.
  All your choices are displayed. Review them to ensure that everything is configured correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Create Cluster&lt;/strong&gt;.
  The services set up for your cluster are displayed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Close&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Get a cup of coffee. It takes a few minutes for the cluster to be created.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You have successfully created a Kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&quot;configure-cloud-shell-to-access-to-your-cluster&quot;&gt;Configure Cloud Shell to Access to Your Cluster&lt;/h3&gt;

&lt;p&gt;After you create a Kubernetes cluster, set up your local system to access the cluster.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sign in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click&lt;strong&gt;Kubernetes Clusters (OKE)&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click the link to &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-cluster&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The information about your cluster is displayed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click Access Cluster.&lt;/li&gt;
  &lt;li&gt;Click Cloud Shell Access. Follow the steps in the dialog. The following steps are provided for your reference.&lt;/li&gt;
  &lt;li&gt;From the main menu, click the Cloud Shell icon (&lt;img src=&quot;https://docs.oracle.com/en-us/iaas/developer-tutorials/tutorials/common/k8s-cs/images/cloud_shell_icon.png&quot; alt=&quot;&quot; /&gt;) and start a session.&lt;/li&gt;
  &lt;li&gt;Check your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oci&lt;/code&gt; CLI version and verify that Cloud Shell is working.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; oci -v
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Make your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kube&lt;/code&gt; directory if it doesn’t exist.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; mkdir -p $&lt;/span&gt;HOME/.kube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create kubeconfig file for your setup. Use the information from &lt;strong&gt;Access Your Cluster&lt;/strong&gt; dialog.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;oci ce cluster create-kubeconfig &amp;lt;use data from dialog&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Test your cluster configuration with the following command.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  kubectl get service
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; file is not stored in its default location (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt;), you must export the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUBECONFIG&lt;/code&gt; environment variable to point to the location.&lt;/p&gt;

  &lt;p&gt;_export KUBECONFIG=$HOME/&lt;new-location&gt;/config_&lt;/new-location&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;When working with more than one cluster, you specify a specific config file on the command line.
Example:
   kubectl –kubeconfig=&amp;lt;/path/to/config/file&amp;gt; &lt;some-command&gt;&lt;/some-command&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With your cluster access setup, you are now ready to prepare your application for deployment.&lt;/p&gt;

&lt;h2 id=&quot;build-your-docker-application&quot;&gt;Build your Docker Application&lt;/h2&gt;

&lt;p&gt;Next, set up the Flask framework on Cloud Shell. Then, create and run a Python application.&lt;/p&gt;

&lt;h3 id=&quot;create-a-local-application&quot;&gt;Create a Local Application&lt;/h3&gt;

&lt;p&gt;Create your Flask application.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install Flask.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip3 install --user Flask
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a directory for your application.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; mkdir python-hello-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Change to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-hello-app&lt;/code&gt; directory.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; cd python-hello-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a “Hello, World!” application.
    &lt;ul&gt;
      &lt;li&gt;Create the file:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; vi hello.py
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;In the file, input the following text:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;lt;h1&amp;gt;Hello World from Flask!&amp;lt;/h1&amp;gt;'&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;run-the-local-application&quot;&gt;Run the Local Application&lt;/h3&gt;

&lt;p&gt;Run your Flask application.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run the Python program.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; export FLASK_APP=hello.py
 export FLASK_ENV=development
 python3 hello.py
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Produces the following output:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Serving Flask app ‘hello’ (lazy loading)&lt;/li&gt;
      &lt;li&gt;Environment: development&lt;/li&gt;
      &lt;li&gt;Debug mode: on&lt;/li&gt;
      &lt;li&gt;Running on all addresses.
 WARNING: This is a development server. Do not use it in a production deployment.&lt;/li&gt;
      &lt;li&gt;Running on http://x.x.x.x:5000/ (Press CTRL+C to quit)&lt;/li&gt;
      &lt;li&gt;Restarting with stat&lt;/li&gt;
      &lt;li&gt;Debugger is active!&lt;/li&gt;
      &lt;li&gt;Debugger PIN: xxx-xxx-xxx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Move the app to the background.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Hit &lt;strong&gt;Ctrl z&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Enter the following command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bg&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test the app using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;In Cloud Shell terminal, enter the following code:&lt;/p&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; curl -X GET http://localhost:5000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World from Flask!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stop the running application.&lt;/p&gt;

    &lt;p&gt;When you are done testing, get the process ID for your application.&lt;/p&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; ps -ef
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Stop the process.&lt;/p&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; kill &amp;lt;your-pid&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You have successfully created a local Python application with the Flask framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For more information on Flask, see &lt;a href=&quot;https://flask.palletsprojects.com/&quot;&gt;Flask Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;build-a-docker-image&quot;&gt;Build a Docker Image&lt;/h3&gt;

&lt;p&gt;Next, create a Docker image for your Flask application.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, ensure you are in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-hello-app&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create the configuration file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; vi Dockerfile
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;In the file, input the following text and save the file:&lt;/p&gt;
    &lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; FROM python:3.9-slim-buster
 ADD hello.py /
 COPY . /app
 WORKDIR /app
 RUN pip3 install Flask
 EXPOSE 5000
 CMD [ &quot;python3&quot;, &quot;./hello.py&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Build a Docker image:
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker build -t python-hello-app .
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You get a success message.&lt;/p&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; [INFO] BUILD SUCCESS
 Successfully tagged python-hello-app:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the Docker image:
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker run --rm -p 5000:5000 python-hello-app:latest &amp;amp;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Test the application using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; command:
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; curl -X GET http://localhost:5000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If you get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;Hello World from Flask!&amp;lt;/h1&amp;gt;&lt;/code&gt;, then the Docker image is running. Now you can push the image to Container Registry.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Stop the running application.
 When you are done testing, get the process ID for your application.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; ps -ef
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Stop the process.&lt;/p&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; kill &amp;lt;your-pid&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Congratulations! You have successfully created a Python Flask Docker image.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;deploy-your-docker-image&quot;&gt;Deploy Your Docker Image&lt;/h2&gt;

&lt;p&gt;With your Python image created, now you can deploy it.&lt;/p&gt;

&lt;h3 id=&quot;create-a-docker-repository&quot;&gt;Create a Docker Repository&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click&lt;strong&gt;Container Registry&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;In the left navigation, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-compartment-name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Click Create Repository.&lt;/li&gt;
  &lt;li&gt;Create a &lt;strong&gt;private repository&lt;/strong&gt; with your choice of repo name:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;repo-name&amp;gt; = &amp;lt;image-path-name&amp;gt;/&amp;lt;image-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flask-apps/python-hello-app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to push your local image to Container Registry.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Before you can push a Docker image into a registry repository, &lt;strong&gt;the repository must exist in your compartment&lt;/strong&gt;. If the repository does not exist, the Docker push command does not work correctly.
The slash in a repository name &lt;strong&gt;does not represent a hierarchical directory structure&lt;/strong&gt;. The optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;image-path-name&amp;gt;&lt;/code&gt; helps to organize your repositories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;push-your-local-image&quot;&gt;Push Your Local Image&lt;/h3&gt;

&lt;p&gt;With your local Docker image created, push the image to the Container Registry.&lt;/p&gt;

&lt;p&gt;Follow these steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a terminal window.&lt;/li&gt;
  &lt;li&gt;Log in to Container Registry:
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; docker login &amp;lt;region-key&amp;gt;&lt;/span&gt;.ocir.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You are prompted for your login name and password.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Username:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;user-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Password:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;auth-token&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List your local Docker images:
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker images
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The Docker images on your system are displayed. Identify the image you created in the last section: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-hello-app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tag&lt;/strong&gt; your local image with the &lt;strong&gt;URL for the registry&lt;/strong&gt; plus the &lt;strong&gt;repo name&lt;/strong&gt;, so you can push it to that repo.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; docker tag &amp;lt;your-local-image&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&amp;lt;repo-url&amp;gt;/&amp;lt;repo-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;repo-url&amp;gt;&lt;/code&gt; with:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;region-key&amp;gt;.ocir.io/&amp;lt;tenancy-namespace&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;repo-name&amp;gt;&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;image-folder-name&amp;gt;/&amp;lt;image-name&amp;gt;&lt;/code&gt; from the &lt;em&gt;Create a Docker Repository&lt;/em&gt; section.&lt;/p&gt;

    &lt;p&gt;Here is an example after combining both:&lt;/p&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker tag python-hello-app iad.ocir.io/my-namespace/flask-apps/python-hello-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;In this example, the components are:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Repo URL:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iad.ocir.io/my-namespace/&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Repo name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flask-apps/python-hello-app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;OCI Container Registry now supports creating a registry repo in any compartment rather than only in the root compartment (tenancy). To push the image to the repo you created, combine the registry URL with the exact repo name. OCI Container Registry matches based on the unique repo name and pushes your image.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Check your Docker images to see if the image is &lt;strong&gt;copied&lt;/strong&gt;.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker images
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;The tagged or the &lt;strong&gt;copied image&lt;/strong&gt; has &lt;strong&gt;the same image ID&lt;/strong&gt; as your local image.&lt;/li&gt;
      &lt;li&gt;The &lt;strong&gt;copied image name&lt;/strong&gt; is:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;region-key&amp;gt;.ocir.io/&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;image-folder-name&amp;gt;/&amp;lt;image-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Push the image to Container Registry.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; docker push **&amp;lt;copied-image-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Example:&lt;/p&gt;
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker push iad.ocir.io/my-namespace/flask-apps/python-hello-app:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click&lt;strong&gt;Container Registry&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;Find your image in Container Registry after the push command is complete.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;deploy-the-image&quot;&gt;Deploy the Image&lt;/h3&gt;

&lt;p&gt;With your image in Container Registry, you can now deploy your image and app.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a registry secret for your application. This secret authenticates your image when you deploy it to your cluster.&lt;/p&gt;

    &lt;p&gt;To create your secret, fill in the information in this template .&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;kubectl create secret docker-registry ocirsecret \
  --docker-server=&amp;lt;region-key&amp;gt;&lt;/span&gt;.ocir.io  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;user-name&amp;gt;'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;auth-token&amp;gt;'&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;email-address&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;After the command runs, you get a message similar to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret/ocirsecret created&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify that the secret is created. Issue the following command:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;kubectl get secret ocirsecret --output=yaml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The output includes information about your secret in the yaml format.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Determine the host URL to your registry image using the following template:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;region-code&amp;gt;.ocir.io/&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;repo-name&amp;gt;/&amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Example:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iad.ocir.io/my-namespace/flask-apps/python-hello-app:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On your system, create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.yaml&lt;/code&gt; with the following text:&lt;/p&gt;

    &lt;p&gt;Replace the following place holders:
    * &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-image-url&amp;gt;&lt;/code&gt;
    * &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-secret-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;your-image-url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;your-secret-name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app-lb&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;flexible&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape-flex-min&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape-flex-max&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deploy your application with the following command.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;kubectl create -f app.yaml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deployment.apps/app created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.yaml&lt;/code&gt; file, the code after the dashes adds a flexible load balancer.&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;h3 id=&quot;test-your-app&quot;&gt;Test Your App&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After you deploy your app, it might take the load balancer a few seconds to load.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Check if the load balancer is live:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl get service
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Repeat the command until load balancer is assigned an IP address.&lt;/p&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;While waiting for the load balancer to deploy, you can check the status of your cluster with these commands:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;Get each pods status: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get pods&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;Get app status: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get deployment&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Use the load balancer IP address to connect to your app in a browser:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; http://&amp;lt;load-balancer-IP-address&amp;gt;:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The browser displays: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;Hello World from Flask!&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Undeploy your application from the cluster. &lt;em&gt;&lt;strong&gt;(Optional)&lt;/strong&gt;&lt;/em&gt; To remove your application run this command:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl delete -f app.yaml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; deployment.apps/python-hello-app deleted
 service &quot;python-hello-app-lb&quot; deleted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Your application is now removed from your cluster.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;p&gt;You have successfully created a Hello World Python application, deployed it to a Kubernetes cluster and made it accessible on the internet, using the Flask framework.&lt;/p&gt;

&lt;p&gt;Check out these sites to explore more information about development with Oracle products:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.oracle.com/&quot;&gt;Oracle Developers Portal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/cloud/&quot;&gt;Oracle Cloud Infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Oracle Developer Community</name>
        
        
      </author>

      

      
        <category term="oci" />
      
        <category term="open-source" />
      
        <category term="kubernetes" />
      
        <category term="flask-cloud-shell" />
      
        <category term="python" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">Experiencing Terraform</title>
      <link href="https://cool.devo.build/collections/tutorials/tf-101/2-experiencing-terraform" rel="alternate" type="text/html" title="Experiencing Terraform" />
      <published>2021-10-08T08:15:00+00:00</published>
      <updated>2021-10-08T08:15:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/tf-101/2-experiencing-terraform</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/tf-101/2-experiencing-terraform">&lt;p&gt;This short project will let you experience the power of Terraform.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create some Terraform code files&lt;/li&gt;
  &lt;li&gt;Learn how to examine what Terraform proposes be done&lt;/li&gt;
  &lt;li&gt;Let Terraform create a VCN and Subnet&lt;/li&gt;
  &lt;li&gt;Organize your Terraform code&lt;/li&gt;
  &lt;li&gt;Get a taste of OCI Cloud Shell&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You should have an Oracle Cloud Infrastructure (OCI) account setup.  &lt;a href=&quot;{{ site.urls.always_free }}&quot;&gt;Click here&lt;/a&gt; to create a new cloud account.&lt;/p&gt;

&lt;p&gt;We’ll be using the &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/API/Concepts/cloudshellintro.htm&quot;&gt;OCI Cloud Shell&lt;/a&gt; in this tutorial, as it provides a great platform for quickly working with Terraform (as well as many other OCI interfaces and tools), having many of these tools pre-installed and ready-to-go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/API/Concepts/cloudshellgettingstarted.htm&quot;&gt;Click here&lt;/a&gt; for directions on how to open up the OCI Cloud Shell.  You’ll need to have this open during this particular portion of the Terraform 101 tutorial series.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-project&quot;&gt;Setting up the project&lt;/h2&gt;

&lt;p&gt;Terraform is incredibly easy to use.  Here’s what we’re going to do in this lesson:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a VCN&lt;/li&gt;
  &lt;li&gt;Create a Subnet in the VCN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow the step-by-step directions, to see how easy/fast it is, then in subsequent lessons we’ll go into greater detail around how to use Terraform.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;NOTE: All commands will be used within OCI Cloud Shell.  If you haven’t opened it up yet, now’s the time to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/API/Concepts/cloudshellgettingstarted.htm&quot;&gt;open your own Cloud Shell session&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;setup-the-oci-provider&quot;&gt;Setup the OCI provider&lt;/h2&gt;

&lt;p&gt;Create a new directory for this project:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;mkdir experiencing-tf
cd experiencing-tf
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;experiencing-tf&lt;/code&gt; directory will have our Terraform files, as well as our Terraform state.  This will be our project directory.&lt;/p&gt;

&lt;p&gt;Using your favorite editor (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt;, etc.) add the following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider.tf&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano provider.tf&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;terraform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;required_version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;= 1.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;oci&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;tenancy_ocid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tenancy_ocid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s start by creating a VCN.  To do so, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vcn.tf&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano vcn.tf&lt;/code&gt;, note that this file doesn’t exist yet - so it’ll be a new file according to your text editor) and place the following contents in it:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oci_core_vcn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tf_101&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.0/24&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tenancy_ocid&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;display_name&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tf-101&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dns_label&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tf101&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above tells Terraform that we want a VCN with a name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tf-101&lt;/code&gt;, using a CIDR block of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.0/24&lt;/code&gt;, deployed into the root (tenancy) compartment.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;NOTE: To keep things simple, this example uses the tenancy (root) compartment, which is often times locked down in many tenancies.  If you’re using a tenancy with limited permissions (one in which you cannot deploy to the root compartment), you’ll need to put in your compartment OCID in place of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var.tenancy_ocid&lt;/code&gt; above.  Something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compartment_id = &quot;PUT_YOUR_COMPARTMENT_OCID_HERE&quot;&lt;/code&gt; should do the trick for now!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;set-up-a-subnet&quot;&gt;Set up a subnet&lt;/h2&gt;

&lt;p&gt;Next we’ll create a subnet within our VCN.  To do this, go ahead and add the following to a new file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subnets.tf&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano subnets.tf&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oci_core_subnet&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vlan1&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cidr_block&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.0/24&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;compartment_id&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tenancy_ocid&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;display_name&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vlan1&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dns_label&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vlan1&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;prohibit_public_ip_on_vnic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vcn_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oci_core_vcn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf_101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will tell Terraform to manage a Subnet that lives within the VCN we’ve previously defined, using the entire CIDR space.  We’ve prohibited the use of public IPs in this Subnet and have decided to give it the amazingly original name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vlan1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Up to this point, we’ve referenced a couple of variables in our resource definitions above: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var.region&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var.tenancy_ocid&lt;/code&gt;.  We need to go ahead and define these in Terraform code.  To do so, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano variables.tf&lt;/code&gt;) and place the following in it:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tenancy_ocid&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;region&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-up-an-output&quot;&gt;Set up an output&lt;/h2&gt;

&lt;p&gt;Now that our inputs are defined, let’s go ahead and setup an output, which will be the status of the VCN.  To do this, modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outputs.tf&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano outputs.tf&lt;/code&gt;) and place the following in it:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcn_state&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The state of the VCN.&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oci_core_vcn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tf_101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the file and exit your text editor.&lt;/p&gt;

&lt;p&gt;The OCI Cloud Shell session is prepopulated with lots of good values that make life super simple.  We need to put this in a format that Terraform cac easily use.  The following commands will setup a few environment variables that Terraform will be using:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;declare -x TF_VAR_tenancy_ocid=`echo $&lt;/span&gt;OCI_TENANCY&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;declare -x TF_VAR_region=`echo $&lt;/span&gt;OCI_REGION&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;action&quot;&gt;Action!&lt;/h2&gt;

&lt;p&gt;Now it’s time to see this all work!  Initialize Terraform by running:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;terraform init
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks something like:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform init
&lt;span class=&quot;go&quot;&gt;
Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/oci...
- Installing hashicorp/oci v4.45.0...
- Installed hashicorp/oci v4.45.0 (unauthenticated)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run &quot;terraform init&quot; in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point Terraform is ready for us to give it directions on what OCI resources we want it to manage.  Let’s look at the plan that Terraform proposes:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform plan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output will be something similar to the following:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform plan
&lt;span class=&quot;go&quot;&gt;
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;oci_core_subnet.vlan1 will be created
&lt;span class=&quot;go&quot;&gt;  + resource &quot;oci_core_subnet&quot; &quot;vlan1&quot; {
      + availability_domain        = (known after apply)
      + cidr_block                 = &quot;192.168.1.0/24&quot;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      + compartment_id             = &quot;ocid1.tenancy.oc1..&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;      + defined_tags               = (known after apply)
      + dhcp_options_id            = (known after apply)
      + display_name               = &quot;vlan1&quot;
      + dns_label                  = &quot;vlan1&quot;
      + freeform_tags              = (known after apply)
      + id                         = (known after apply)
      + ipv6cidr_block             = (known after apply)
      + ipv6virtual_router_ip      = (known after apply)
      + prohibit_internet_ingress  = (known after apply)
      + prohibit_public_ip_on_vnic = true
      + route_table_id             = (known after apply)
      + security_list_ids          = (known after apply)
      + state                      = (known after apply)
      + subnet_domain_name         = (known after apply)
      + time_created               = (known after apply)
      + vcn_id                     = (known after apply)
      + virtual_router_ip          = (known after apply)
      + virtual_router_mac         = (known after apply)
    }

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;oci_core_vcn.tf_101 will be created
&lt;span class=&quot;go&quot;&gt;  + resource &quot;oci_core_vcn&quot; &quot;tf_101&quot; {
      + cidr_block               = &quot;192.168.1.0/24&quot;
      + cidr_blocks              = (known after apply)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      + compartment_id           = &quot;ocid1.tenancy.oc1..&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;      + default_dhcp_options_id  = (known after apply)
      + default_route_table_id   = (known after apply)
      + default_security_list_id = (known after apply)
      + defined_tags             = (known after apply)
      + display_name             = &quot;tf-101&quot;
      + dns_label                = &quot;tf101&quot;
      + freeform_tags            = (known after apply)
      + id                       = (known after apply)
      + ipv6cidr_blocks          = (known after apply)
      + is_ipv6enabled           = (known after apply)
      + state                    = (known after apply)
      + time_created             = (known after apply)
      + vcn_domain_name          = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vcn_state = (known after apply)

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run &quot;terraform apply&quot;
now.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we’re able to see here is that Terraform is proposing to create two new resources: a VCN and a Subnet.  Both of these are expected and things appear to be in order, so we’ll go ahead and apply it (tell Terraform to make the changes), by running:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll see something like what we saw for plan, but have a prompt asking if we’d like to continue:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Changes to Outputs:
  + vcn_state = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we accept the proposed changes, we’ll see something like:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

oci_core_vcn.tf_101: Creating...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;oci_core_vcn.tf_101: Creation complete after 2s [id=ocid1.vcn.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;oci_core_subnet.vlan1: Creating...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;oci_core_subnet.vlan1: Creation complete after 2s [id=ocid1.subnet.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

vcn_state = &quot;AVAILABLE&quot;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wow, that was easy!  One command to set up multiple resources… terrific!&lt;/p&gt;

&lt;h2 id=&quot;cleaning-up&quot;&gt;Cleaning Up&lt;/h2&gt;

&lt;p&gt;Since we’re at the end of this short session, we want to clean up after ourselves.  Let’s go ahead and remove the VCN and Subnet.  This could be multiple clicks on the OCI Console, however since we’re using Terraform, one command is all we need to run:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll see something like the following:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform destroy
&lt;span class=&quot;gp&quot;&gt;oci_core_vcn.tf_101: Refreshing state... [id=ocid1.vcn.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;oci_core_subnet.vlan1: Refreshing state... [id=ocid1.subnet.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;oci_core_subnet.vlan1 will be destroyed
&lt;span class=&quot;go&quot;&gt;  - resource &quot;oci_core_subnet&quot; &quot;vlan1&quot; {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - cidr_block                 = &quot;192.168.1.0/24&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - compartment_id             = &quot;ocid1.compartment.oc1..&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; -&amp;gt; null
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;      - defined_tags               = {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;          - &quot;Oracle-Tags.CreatedBy&quot; = &quot;&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;          - &quot;Oracle-Tags.CreatedOn&quot; = &quot;2021-09-30T19:44:47.597Z&quot;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        } -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - dhcp_options_id            = &quot;ocid1.dhcpoptions.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; -&amp;gt; null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - display_name               = &quot;vlan1&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - dns_label                  = &quot;vlan1&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - freeform_tags              = {} -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - id                         = &quot;ocid1.subnet.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -&amp;gt; null
&lt;span class=&quot;gp&quot;&gt;      - prohibit_internet_ingress  = true -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - prohibit_public_ip_on_vnic = true -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - route_table_id             = &quot;ocid1.routetable.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; -&amp;gt; null
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;      - security_list_ids          = [
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;          - &quot;ocid1.securitylist.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        ] -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - state                      = &quot;AVAILABLE&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - subnet_domain_name         = &quot;vlan1.tf101.oraclevcn.com&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - time_created               = &quot;2021-09-30 19:44:47.659 +0000 UTC&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - vcn_id                     = &quot;ocid1.vcn.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -&amp;gt; null
&lt;span class=&quot;gp&quot;&gt;      - virtual_router_ip          = &quot;192.168.1.1&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - virtual_router_mac         = &quot;00:00:17:28:74:9C&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;go&quot;&gt;    }

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;oci_core_vcn.tf_101 will be destroyed
&lt;span class=&quot;go&quot;&gt;  - resource &quot;oci_core_vcn&quot; &quot;tf_101&quot; {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - cidr_block               = &quot;192.168.1.0/24&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;go&quot;&gt;      - cidr_blocks              = [
          - &quot;192.168.1.0/24&quot;,
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        ] -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - compartment_id           = &quot;ocid1.compartment.oc1..&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; -&amp;gt; null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - default_dhcp_options_id  = &quot;ocid1.dhcpoptions.oc1.phx.&amp;lt;saanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -&amp;gt; null
&lt;span class=&quot;gp&quot;&gt;      - default_route_table_id   = &quot;ocid1.routetable.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; -&amp;gt; null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - default_security_list_id = &quot;ocid1.securitylist.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -&amp;gt; null
&lt;span class=&quot;go&quot;&gt;      - defined_tags             = {
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;          - &quot;Oracle-Tags.CreatedBy&quot; = &quot;&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;          - &quot;Oracle-Tags.CreatedOn&quot; = &quot;2021-09-30T19:44:46.481Z&quot;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        } -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - display_name             = &quot;tf-101&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - dns_label                = &quot;tf101&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - freeform_tags            = {} -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;gp&quot;&gt;      - id                       = &quot;ocid1.vcn.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; -&amp;gt; null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - ipv6cidr_blocks          = [] -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - is_ipv6enabled           = false -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - state                    = &quot;AVAILABLE&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - time_created             = &quot;2021-09-30 19:44:46.736 +0000 UTC&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;      - vcn_domain_name          = &quot;tf101.oraclevcn.com&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;null
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    }

Plan: 0 to add, 0 to change, 2 to destroy.

Changes to Outputs:
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  - vcn_state = &quot;AVAILABLE&quot; -&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;null
&lt;span class=&quot;go&quot;&gt;
Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After entering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yes&lt;/code&gt; in the prompt, Terraform will destroy the resources for us:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;oci_core_subnet.vlan1: Destroying... [id=ocid1.subnet.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;oci_core_subnet.vlan1: Destruction complete after 1s
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;oci_core_vcn.tf_101: Destroying... [id=ocid1.vcn.oc1.phx.&amp;lt;sanitized&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;oci_core_vcn.tf_101: Destruction complete after 1s

Destroy complete! Resources: 2 destroyed.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;If this was your first time using Terraform, that was a &lt;em&gt;LOT&lt;/em&gt; to take in!  It was worth it, as we got a lot done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created five (5) Terraform code files that defined our inputs, outputs and resources we want Terraform to manage&lt;/li&gt;
  &lt;li&gt;Learned how to examine what Terraform proposes be done (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Let Terraform create a VCN and Subnet for us (very quickly)&lt;/li&gt;
  &lt;li&gt;Fun facts: It took Terraform under 10 seconds to provision a VCN and Subnet (try it yourself by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time terraform apply -auto-approve&lt;/code&gt;) and under 7 seconds to destroy (try it yourself by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time terraform destroy -auto-approve&lt;/code&gt;) those same resources.  Try to beat that doing it by hand in the OCI Console!&lt;/li&gt;
  &lt;li&gt;Organized our Terraform code into logical files (so it’s easy to navigate the code)&lt;/li&gt;
  &lt;li&gt;Got a taste for how handy and easy it is to use the OCI Cloud Shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully this short tutorial gave you a glimpse into the basic flow around using Terraform and how powerful it can be.  This was a super simple example, but was a solid first start at using Terraform.  The &lt;a href=&quot;3-understanding-terraform-basics.md&quot;&gt;next lesson&lt;/a&gt; digs into some of the core concepts and components in a Terraform project.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Tim Clegg</name>
        
        
      </author>

      
        
          <category term="iac" />
        
          <category term="opensource" />
        
      

      
        <category term="open-source" />
      
        <category term="terraform" />
      
        <category term="iac" />
      
        <category term="devops" />
      
        <category term="beginner" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">Install Jupyter Lab in OCI</title>
      <link href="https://cool.devo.build/collections/tutorials/install-jupyter-lab-on-oci" rel="alternate" type="text/html" title="Install Jupyter Lab in OCI" />
      <published>2021-10-07T14:27:00+00:00</published>
      <updated>2021-10-07T14:27:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/install-jupyter-lab-on-oci</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/install-jupyter-lab-on-oci">&lt;p&gt;This tutorial will guide you through setting up your environment to run Jupyter Lab on Oracle Cloud Infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You’ll need a Virtual Machine 2.1 with Oracle Linux 7.9 (OEL7) deployed in Oracle Cloud Infrastructure (OCI).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle Linux 7.9 using pip3.6 by default.&lt;/li&gt;
  &lt;li&gt;Python 3.6 or higher installed&lt;/li&gt;
  &lt;li&gt;Access to root, either directly or via sudo. By default in OCI, you are connected as the “opc” user with sudo privilege.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The install is pretty simple. It consists of setting up python and installing python components and libraries.&lt;/p&gt;

&lt;p&gt;Lets start with setting up the Python Environment&lt;/p&gt;

&lt;h2 id=&quot;python-setup&quot;&gt;Python Setup&lt;/h2&gt;

&lt;p&gt;By default, OEL7 runs Python 3. The first step is to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Virtualenv enables us to create isolated sandboxes for developing Python applications without running into module or library conflicts. It’s very simple to install:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; sudo pip3.6 install virtualenv
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next we can create a virtual environment called “myvirtualenv”&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; virtualenv -p /usr/bin/python3 myvirtualenv
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Activate the &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; source myvirtualenv/bin/activate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check list of Python Libraries in your environment&lt;/p&gt;

    &lt;p&gt;Running the following command will show what Python models we have installed at this point.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; (myvirtualenv)$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;pip3 list
&lt;span class=&quot;go&quot;&gt; Package    Version
 ---------- -------
 pip        21.1.3
 setuptools 57.1.0
 wheel      0.36.2
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; WARNING: You are using pip version 21.1.3;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;however, version 21.2.1 is available.
&lt;span class=&quot;go&quot;&gt; You should consider upgrading via the '/home/opc/myvirtualenv/bin/python -m pip install --upgrade pip' command.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upgrade your PIP Environment for this virtual environment:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; /home/opc/myvirtualenv/bin/python -m pip install --upgrade pip
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jupyter-lab-setup&quot;&gt;Jupyter Lab Setup&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; to install Jupyter Lab:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip3 install jupyterlab
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Python Libraries for Machine Learning or ETL Process:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip install pandas
 pip install pandarallel
 pip install dask
 pip install seaborn
 pip install matplotlib
 pip install plotly
	
 pip install -lxml==4.6.3
 pip install selenium
 pip install beautifulsoup4
	
 pip install scikit-learn
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install other Python libraries for Kafka Access and WEB Server Access:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip install kafka-python (v2.0.0)
 pip install Flask
 pip install gunicorn
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install extensions for Jupyter Lab environment:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip install jupyter_contrib_nbextensions
 jupyter contrib nbextension install --user
 jupyter nbextension enable execute_time/ExecuteTime
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;configure-jupyter-lab-like-an-oel7-linux-service&quot;&gt;Configure Jupyter Lab like an OEL7 Linux Service&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a script to instantiate automatically and reboot jupyterlab with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opc&lt;/code&gt; user.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; vi /home/opc/launchjupyterlab.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the contents below to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchjupyterlab.sh&lt;/code&gt;. You must use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; you created, and you can launch Jupyter Lab on a specific port (for example: 8001) and listen on your VM’s public IP.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
	
 &lt;span class=&quot;c&quot;&gt;# Activate myvirtualenv Environment&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;myvirtualenv/bin/activate
	
 &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/opc
	
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nohup &lt;/span&gt;jupyter-lab &lt;span class=&quot;nt&quot;&gt;--ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0 &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8001 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ./nohup.log 2&amp;gt;&amp;amp;1 &amp;amp;
     &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /home/opc/jupyter.pid
 &lt;span class=&quot;k&quot;&gt;else
     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /home/opc/jupyter.pid&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make the script executable so it can be run from the jupyterlab service:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; chmod 777 /home/opc/launchjupyterlab.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect to “root” user:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; sudo -i
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a script to start and stop the “jupyterlab” service:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; vi /etc/systemd/system/jupyterlab.service
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupyterlab.service&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; [Unit]
 Description=Service to start jupyterlab for opc
 Documentation=
 [Service]
 User=opc
 Group=opc
 Type=forking
 WorkingDirectory=/home/opc
 ExecStart=/home/opc/launchjupyterlab.sh start
 ExecStop=/home/opc/launchjupyterlab.sh stop
 [Install]
 WantedBy=multi-user.target
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test the Jupyter Lab Service&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; systemctl start jupyterlab
 systemctl status jupyterlab
 systemctl enable jupyterlab
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reboot-your-vm&quot;&gt;Reboot your VM&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Reboot your machine to check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupyterlab&lt;/code&gt; script is enabled by default on port we defined (8001).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open port 8001 to your virtual machine VM 2.1 so you can access Jupyter Lab using your Public IP.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; firewall-cmd  --permanent --zone=public --list-ports
 firewall-cmd --get-active-zones
 firewall-cmd --permanent --zone=public --add-port=8001/tcp
 firewall-cmd --reload
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re running directly on a virtual machine and have a browser installed, it should take you directly into the Jupyter environment. Connect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://xxx.xxx.xxx.xxx:8001/&lt;/code&gt; (replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx&lt;/code&gt; with your public IP).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now see the Python Web environment “Jupyter Lab”.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Oracle Developer Community</name>
        
        
      </author>

      
        
          <category term="ai-ml" />
        
      

      
        <category term="oci" />
      
        <category term="get-started" />
      
        <category term="jupyter" />
      
        <category term="python" />
      
        <category term="data-science" />
      
        <category term="machine-learning" />
      
        <category term="open-source" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">Get Started with your own LAMP stack application on Oracle Cloud</title>
      <link href="https://cool.devo.build/collections/tutorials/get-started-with-lamp-on-oci" rel="alternate" type="text/html" title="Get Started with your own LAMP stack application on Oracle Cloud" />
      <published>2021-10-01T09:18:00+00:00</published>
      <updated>2021-10-01T09:18:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/get-started-with-lamp-on-oci</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/get-started-with-lamp-on-oci">&lt;p&gt;I’ve written &lt;a href=&quot;https://lefred.be/deploy-to-oci/&quot;&gt;several articles&lt;/a&gt; about how to deploy popular Open Source applications on Oracle Cloud Infrastructure and MySQL Database Service.&lt;/p&gt;

&lt;p&gt;Now we will see how you can deploy your own LAMP stack application using the same technique where &lt;strong&gt;L&lt;/strong&gt; will stand for a compute instance (and why not the &lt;a href=&quot;https://lefred.be/content/deploy-on-oci-using-ampere-compute-instances/&quot;&gt;Ampere always free trier&lt;/a&gt;?), &lt;strong&gt;A&lt;/strong&gt; stays Apache and will run in that compute instance. &lt;strong&gt;M&lt;/strong&gt; stands for MySQL Database Service and &lt;strong&gt;P&lt;/strong&gt; is for PHP.&lt;/p&gt;

&lt;p&gt;As usual we start by deploying a Stack by just clicking on the deploy button &lt;a href=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-11-43.png&quot;&gt;from GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we are redirected to OCI’s dashboard and we need to accept the Terms of Use:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-11-56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as we accept the Terms of Use, we see the information being updated, and we can directly click on Next:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-12-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the next screen, we can set all the variables. Some are mandatory and the others are already pre-filled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-12-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is also where you can choose which version of PHP you want to use:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Selection_048.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You validate everything, and then Create the stack and deploy the architecture on OCI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-13-12.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-28-39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have all the generated and required information in the &lt;strong&gt;Outputs&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;We can already use the public IP in a browser and we should see the following page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Selection_049.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the Web server is ready to get our code. From the stack’s outputs, we already know the IP, the username, and password to use to connect to MySQL Database Service.&lt;/p&gt;

&lt;p&gt;We also need the ssh key that we can copy locally to ssh to the Web Server to deploy our code, or we can use the Cloud Shell from OCI’s dashboard. Let’s use it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-31-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We create a file for the ssh key (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php.key&lt;/code&gt;) and we paste its content in it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-28-39-1.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-31-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We change the permission of the key’s file and we use it to connect to our web server using its public IP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-32-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an application, we will use &lt;a href=&quot;https://gist.github.com/lefred/b97fe90f31115607e0d28ddc8a72ca16&quot;&gt;this gist file which is a PHP script&lt;/a&gt; that connects to MDS and we will place it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**/var/www/html**&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-32-58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We edit it, and there are 3 variables to modify using the values from the Stack’s outputs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-41-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When done, we can refresh the page on the browser and we will see our code being processed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/get-started-with-lamp-on-oci-Screenshot-from-2021-05-28-13-54-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Web server box already contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;certbot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you are able to deploy your own LAMP stack easily to OCI, enjoy!&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>lefred</name>
        
        
      </author>

      
        
          <category term="cloudapps" />
        
      

      
        <category term="data-management" />
      
        <category term="front-end" />
      
        <category term="mysql" />
      
        <category term="oci" />
      
        <category term="orm" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">Kubernetes - Deploy a Node Express Application</title>
      <link href="https://cool.devo.build/collections/tutorials/deploy-a-node-express-application" rel="alternate" type="text/html" title="Kubernetes - Deploy a Node Express Application" />
      <published>2021-09-30T01:00:00+00:00</published>
      <updated>2021-09-30T01:00:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/deploy-a-node-express-application</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/deploy-a-node-express-application">&lt;p&gt;In this tutorial, you use an Oracle Cloud Infrastructure account to set up a Kubernetes cluster. Then, you deploy a Node Express application to your cluster.&lt;/p&gt;

&lt;p&gt;Key tasks include how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set up a Kubernetes cluster on OCI.&lt;/li&gt;
  &lt;li&gt;Set up OCI CLI to access your cluster.&lt;/li&gt;
  &lt;li&gt;Build a Node Express application and Docker Image.&lt;/li&gt;
  &lt;li&gt;Push your image to OCIR.&lt;/li&gt;
  &lt;li&gt;Deploy your Node.js Docker application to your cluster.&lt;/li&gt;
  &lt;li&gt;Connect to your application from the internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/deploy-a-node-express-application-Node-K8s-diagram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For additional information, see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/home/&quot;&gt;Kubernetes Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/iaas/Content/ContEng/Concepts/contengoverview.htm&quot;&gt;OCI Container Engine for Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/iaas/Content/Registry/Concepts/registryoverview.htm&quot;&gt;OCI Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;before-you-begin&quot;&gt;Before You Begin&lt;/h2&gt;

&lt;p&gt;To successfully perform this tutorial, you must have the following:&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;For Container Registry, Kubernetes and Load Balancers:
    &lt;ul&gt;
      &lt;li&gt;A &lt;strong&gt;paid&lt;/strong&gt; Oracle Cloud Infrastructure account.&lt;/li&gt;
      &lt;li&gt;See &lt;a href=&quot;https://docs.oracle.com/iaas/Content/GSG/Tasks/signingup.htm&quot;&gt;Signing Up for Oracle Cloud Infrastructure&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For building applications and Docker images:
    &lt;ul&gt;
      &lt;li&gt;One of the following local environments:
        &lt;ul&gt;
          &lt;li&gt;A MacOS or Linux machine.&lt;/li&gt;
          &lt;li&gt;A Windows machine with Linux support. For example:
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Oracle Virtual Box&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The following applications on your local environment:
        &lt;ul&gt;
          &lt;li&gt;JDK 11 and set JAVA_HOME in .bashrc.&lt;/li&gt;
          &lt;li&gt;Python 3.6.8+ and pip installer for Python 3&lt;/li&gt;
          &lt;li&gt;Kubernetes Client 1.11.9+&lt;/li&gt;
          &lt;li&gt;Apache Maven 3.0+&lt;/li&gt;
          &lt;li&gt;Docker 19.0.3+&lt;/li&gt;
          &lt;li&gt;Git 1.8+&lt;/li&gt;
          &lt;li&gt;Node.js 10+&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: If you don’t want to set up the required applications on your local environment, you can use Oracle Cloud Infrastructure &lt;strong&gt;Cloud Shell&lt;/strong&gt; instead. The advantage of using Cloud Shell is all the required tools to manage your application are already installed and ready to use. Follow the steps in:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/iaas/developer-tutorials/tutorials/spring-on-k8s-cs/01oci-spring-cs-k8s-summary.htm&quot;&gt;Kubernetes Using Cloud Shell: Deploy a Spring Boot Application&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;get-the-applications-for-linux-on-oci-free-tier&quot;&gt;Get the Applications for Linux on OCI Free Tier&lt;/h3&gt;

&lt;p&gt;If you want to use an OCI Free Tier Linux compute instance to manage your deployment, the following sections provide information to get the required software installed.&lt;/p&gt;

&lt;h4 id=&quot;install-a-linux-instance&quot;&gt;Install a Linux Instance&lt;/h4&gt;

&lt;p&gt;Install a Linux VM with an &lt;strong&gt;Always Free&lt;/strong&gt; compute shape, on Oracle Cloud Infrastructure. You will need a machine with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; support to connect to your Linux instance.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To &lt;a href=&quot;https://docs.oracle.com/iaas/developer-tutorials/tutorials/apache-on-oracle-linux/01oci-ol-apache-summary.htm#create-oracle-linux-vm&quot;&gt;install an Oracle Linux VM&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Follow sections 2 and 3.&lt;/li&gt;
      &lt;li&gt;If you have a paid account, for section 2, choose your compute options based on your offerings.&lt;/li&gt;
      &lt;li&gt;To connect to your instance, in section 4, follow steps 1-5.&lt;/li&gt;
      &lt;li&gt;Skip the Apache instructions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To &lt;a href=&quot;https://docs.oracle.com/iaas/developer-tutorials/tutorials/helidon-on-ubuntu/01oci-ubuntu-helidon-summary.htm#create-ubuntu-vm&quot;&gt;install an Ubuntu VM&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Follow sections 2 and 3.&lt;/li&gt;
      &lt;li&gt;If you have a paid account, for section 2, choose compute options based on your offerings.&lt;/li&gt;
      &lt;li&gt;To connect to your instance, in section 4, follow steps 1-5.&lt;/li&gt;
      &lt;li&gt;Skip the Apache instructions.&lt;/li&gt;
      &lt;li&gt;To update the firewall settings, in section 4, perform step 8.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install-nodejs-on-your-system&quot;&gt;Install Node.js on your system.&lt;/h2&gt;

&lt;p&gt;First, you will run install commands. To install Node.js and NPM, run the following commands, using the appropriate system:&lt;/p&gt;

&lt;h3 id=&quot;oracle-linux&quot;&gt;Oracle Linux:&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo yum update
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set up the Yum repo for Node.js. Then install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt; package.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo yum install -y oracle-nodejs-release-el7
sudo yum install -y nodejs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu:&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo apt update
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt; packages.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo apt install -y nodejs
sudo apt install -y npm
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Verify the installation.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;node -v
npm -v
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-firewall-optional&quot;&gt;Configure Firewall (Optional)&lt;/h2&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: If you want to do browser-based testing of your Node application, make port 3000 available on your Linux instance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;oracle-linux-1&quot;&gt;Oracle Linux:&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo firewall-cmd --add-service=http --permanent
sudo firewall-cmd --add-service=https --permanent
sudo firewall-cmd --reload
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ubuntu-linux&quot;&gt;Ubuntu Linux:&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 3000 -j ACCEPT
sudo netfilter-persistent save
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-an-ingress-rule-for-your-vcn-optional&quot;&gt;Create an Ingress Rule for your VCN (Optional)&lt;/h2&gt;

&lt;p&gt;Follow these steps to select your VCN’s public subnet and add the ingress rule.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Networking&lt;/strong&gt;, and then click &lt;strong&gt;Virtual Cloud Networks&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select the VCN you created with your compute instance.&lt;/li&gt;
  &lt;li&gt;With your new VCN displayed, click &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;your-subnet-name&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/strong&gt; subnet link. The public subnet information is displayed with the Security Lists at the bottom of the page. A link to the &lt;strong&gt;Default Security List&lt;/strong&gt; for your VCN is displayed.&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;Default Security List&lt;/strong&gt; link.
    &lt;ul&gt;
      &lt;li&gt;The default &lt;strong&gt;Ingress Rules&lt;/strong&gt; for your VCN are displayed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Add Ingress Rules&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;An &lt;strong&gt;Add Ingress Rules&lt;/strong&gt; dialog is displayed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fill in the ingress rule with the following information:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; Stateless: Checked
 Source Type: CIDR
 Source CIDR: 0.0.0.0/0
 IP Protocol: TCP
 Source port range: (leave-blank)
 Destination Port Range: 3000
 Description: Allow HTTP connections
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Click Add Ingress Rule.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now HTTP connections are allowed. Your VCN is configured for Node Express.&lt;/p&gt;

&lt;p&gt;You have successfully created an ingress rule that makes your instance available from the internet.&lt;/p&gt;

&lt;h2 id=&quot;install-python-3-and-pip-3&quot;&gt;Install Python 3 and Pip 3&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Verify your current installation.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; python3 --version
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Python 3, run the following commands:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Oracle Linux:&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  sudo yum update

  sudo yum install -y python3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ubuntu:&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  sudo apt update

  sudo apt install -y python3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify the pip installation for Python3.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip3 -V
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Example output if pip for Python3 is installed:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; pip &amp;lt;version&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;from xxx/lib/python3.x/site-packages/pip   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;python 3.x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To install Pip for Python 3, run the following commands:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Oracle Linux:&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  sudo yum update

  sudo yum install -y python3-pip
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ubuntu:&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  sudo apt update

  sudo apt install -y python3-pip
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify the pip for Python 3 installation.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip3 -V
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-kubernetes-client&quot;&gt;Install Kubernetes Client&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Verify your current installation:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl version --client
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If you have Kubernetes, then the version is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;major-version&amp;gt;.&amp;lt;minor-version&amp;gt;&lt;/code&gt;. For example, for version 1.20, you get the following:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; version.Info{Major:&quot;1&quot;, Minor:&quot;20&quot;...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To install he &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; client, refer to the following links:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-kubectl-binary-with-curl-on-linux&quot;&gt;Install Kubernetes client on Linux&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/&quot;&gt;Install Kubernetes client on MacOS&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify the installation.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl version --client
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-docker&quot;&gt;Install Docker&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Verify your current installation:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker -v
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Oracle Linux&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  sudo yum install docker-engine
            
  sudo systemctl start docker

  sudo systemctl enable docker
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;blockquote class=&quot;notice&quot;&gt;
          &lt;p&gt;Note: The last command enables Docker to start on reboots.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ubuntu Linux&lt;/p&gt;

        &lt;p&gt;To install Docker on Ubuntu Linux, refer to the following link: &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;Get Docker&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify the installation.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker -v
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;prepare&quot;&gt;Prepare&lt;/h2&gt;

&lt;p&gt;Prepare your environment to create and deploy your application.&lt;/p&gt;

&lt;h3 id=&quot;check-your-service-limits&quot;&gt;Check your Service Limits&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu, and click Governance and Administration. Under Governance, click Limits, Quotas and Usage.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find your service limit for &lt;strong&gt;Regions&lt;/strong&gt;:&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; Regions&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; Tenancy&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Resource:&lt;/strong&gt; Subscribed region count&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Find service limit:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscribed-region-count&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Service Limit:&lt;/strong&gt; minimum 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find your available &lt;strong&gt;Compute&lt;/strong&gt; &lt;strong&gt;core count&lt;/strong&gt; for the &lt;strong&gt;VM.Standard.E3.Flex&lt;/strong&gt; shape:&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; Compute&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;first-availability-domain&amp;gt;&lt;/code&gt;. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EMlr:US-ASHBURN-AD-1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Resource:&lt;/strong&gt; &lt;strong&gt;Cores&lt;/strong&gt; for &lt;strong&gt;Standard.E3.Flex&lt;/strong&gt; and BM.Standard.E3.128 Instances&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Find available core count:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard-e3-core-ad-count&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Available:&lt;/strong&gt; minimum 1&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Repeat for &lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;second-availability-domain&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;third-availability-domain&amp;gt;&lt;/code&gt;. Each region must have at least one core available for this shape.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find out if you have &lt;strong&gt;50 GB&lt;/strong&gt; of &lt;strong&gt;Block Volume&lt;/strong&gt; available:&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; Block Volume&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;first-availability-domain&amp;gt;&lt;/code&gt;. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EMlr:US-ASHBURN-AD-1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Resource&lt;/strong&gt; Volume Size (GB)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Find available block volume storage:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total-storage-gb&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Available:&lt;/strong&gt; minimum 50&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Repeat for &lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;second-availability-domain&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;third-availability-domain&amp;gt;&lt;/code&gt;. Each region must have at least 50 GB of block volume available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find out how many &lt;strong&gt;Flexible Load Balancers&lt;/strong&gt; you have available:&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Filter&lt;/strong&gt; for the following options:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Service:&lt;/strong&gt; LBaaS&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-region&amp;gt;&lt;/code&gt;. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;us-ashburn-1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Resource:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;blank&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt; (root)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Find the number of available flexible load balancers:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Limit Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lb-flexible-count&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Available:&lt;/strong&gt; minimum 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: This tutorial creates three compute instances with a &lt;strong&gt;VM.Standard.E3.Flex&lt;/strong&gt; shape for the cluster nodes. To use another shape, filter for its &lt;strong&gt;core count&lt;/strong&gt;. For example, for &lt;strong&gt;VM.Standard2.4&lt;/strong&gt;, filter for &lt;strong&gt;Cores for Standard2 based VM and BM Instances&lt;/strong&gt; and get the &lt;strong&gt;count&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a list of all shapes, see &lt;a href=&quot;https://docs.oracle.com/iaas/Content/Compute/References/computeshapes.htm#vmshapes__vm-standard&quot;&gt;VM Standard Shapes&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: This tutorial creates a load balancer with a &lt;strong&gt;flexible&lt;/strong&gt; shape. To use another bandwidth, filter for its &lt;strong&gt;count&lt;/strong&gt;, for example &lt;strong&gt;100-Mbps bandwidth&lt;/strong&gt; or &lt;strong&gt;400-Mbps bandwidth&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;create-an-authorization-token&quot;&gt;Create an Authorization Token&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;In the Console’s top navigation bar, click the &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar).&lt;/li&gt;
  &lt;li&gt;Click your username.&lt;/li&gt;
  &lt;li&gt;Click Auth Tokens.&lt;/li&gt;
  &lt;li&gt;Click Generate Token.&lt;/li&gt;
  &lt;li&gt;Give it a description.&lt;/li&gt;
  &lt;li&gt;Click Generate Token.&lt;/li&gt;
  &lt;li&gt;Copy the token and &lt;strong&gt;save&lt;/strong&gt; it.&lt;/li&gt;
  &lt;li&gt;Click Close.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: Ensure that you save your token right after you create it. You have no access to it later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;gather-required-information&quot;&gt;Gather Required Information&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Collect the following credential information from the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Tenancy name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar) and find your &lt;strong&gt;Tenancy:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Tenancy namespace:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-namespace&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar).&lt;/li&gt;
          &lt;li&gt;Click &lt;strong&gt;Tenancy:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
          &lt;li&gt;Copy the value for &lt;strong&gt;Object Storage Namespace&lt;/strong&gt;.&lt;/li&gt;
        &lt;/ul&gt;

        &lt;blockquote class=&quot;notice&quot;&gt;
          &lt;p&gt;Note For some accounts, tenancy name and namespace differ. Ensure that you use namespace in this tutorial.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Tenancy OCID:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-ocid&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar), then click &lt;strong&gt;Tenancy:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-name&amp;gt;&lt;/code&gt;&lt;/strong&gt;, and copy OCID.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Username:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;user-name&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;User OCID:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;user-ocid&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Click your &lt;strong&gt;Profile&lt;/strong&gt; menu (your avatar), then click &lt;strong&gt;User Settings&lt;/strong&gt;, and copy OCID.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find your region information.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Region:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;region-identifier&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;In the Console’s top navigation bar, find your region. Example: &lt;strong&gt;US East (Ashburn)&lt;/strong&gt;.&lt;/li&gt;
          &lt;li&gt;Find your &lt;strong&gt;Region Identifier&lt;/strong&gt; from the table in &lt;a href=&quot;https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm&quot;&gt;Regions and Availability Domains&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;us-ashburn-1&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Region Key:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;region-key&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Find your &lt;strong&gt;Region Key&lt;/strong&gt; from the table in &lt;a href=&quot;https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm&quot;&gt;Regions and Availability Domains&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iad&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy your authentication token from &lt;strong&gt;Create an Authentication Token&lt;/strong&gt; section.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Auth Token:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;auth-token&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-up-oci-command-line-interface&quot;&gt;Set up OCI Command Line Interface&lt;/h2&gt;

&lt;h3 id=&quot;install-a-python-virtual-environment-and-wrapper&quot;&gt;Install a Python Virtual Environment and Wrapper&lt;/h3&gt;

&lt;p&gt;The Python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; creates a folder that contains all the executables and libraries for your project.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenvwrapper&lt;/code&gt; is an extension to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;. It provides a set of commands, which makes working with virtual environments much more pleasant. It also places all your virtual environments in one place. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenvwrapper&lt;/code&gt; provides tab-completion on environment names.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip3 install --user virtualenv
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenvwrapper&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip3 install --user virtualenvwrapper
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the location of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenvwrapper.sh&lt;/code&gt; script.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; grep -R virtualenvwrapper.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Example paths:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Linux example: 
     /home/ubuntu/.local/bin/virtualenvwrapper.sh
 MacOS example: 
     /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure the virtual environment wrapper in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; sudo vi .bashrc
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Append the following text.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up Python &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; export WORKON_HOME=~/envs
 export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
 export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=' -p /usr/bin/python3 '
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; source &amp;lt;path-to-virtualenvwrapper.sh&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;path-to-virtualenvwrapper.sh&amp;gt;&lt;/code&gt; with its value.&lt;/p&gt;

    &lt;p&gt;Based on the location of Python3 binaries in your environment, update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/python3&lt;/code&gt; to its correct location.&lt;/p&gt;

    &lt;p&gt;Save the file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Activate the commands in the current window.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; source ~/.bashrc
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Example output:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; virtualenvwrapper.user_scripts creating /home/ubuntu/envs/premkproject
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/postmkproject
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/initialize
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/premkvirtualenv
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/postmkvirtualenv
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/prermvirtualenv
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/postrmvirtualenv
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/predeactivate
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/postdeactivate
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/preactivate
 virtualenvwrapper.user_scripts creating /home/ubuntu/envs/postactivate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;install-oci-cli&quot;&gt;Install OCI CLI&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start a virtual environment.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; workon cli-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Confirm that the name of your virtual environment, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cli-app&lt;/code&gt; appears in the left of your command prompt.&lt;/p&gt;

    &lt;p&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cli-app) ubuntu@&amp;lt;ubuntu-instance-name&amp;gt;:~$&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install OCI CLI.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; pip3 install oci-cli
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test the installation:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; oci --version
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If everything is set up correctly, you get the version.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; oci --help
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;configure-the-oci-cli&quot;&gt;Configure the OCI CLI&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enter the following command in your &lt;strong&gt;virtual environment&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; oci setup config
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Enter your answers from the &lt;strong&gt;Gather Required Information&lt;/strong&gt; section:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Location for your config [$HOME/.oci/config]:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;take-default&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;User OCID:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;user-ocid&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Tenancy OCID:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-ocid&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Region (e.g. us-ashburn-1):&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;region-identifier&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Enter the following information to set up your OpenSSL API encryption keys:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Generate a new API Signing RSA key pair? [Y/n]:&lt;/strong&gt; Y&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Directory for your keys [$HOME/.oci]:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;take-default&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Name for your key [oci_api_key]&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;take-default&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deactivate the virtual environment:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; deactivate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cli-app)&lt;/code&gt; prefix in your environment is not displayed any more.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: Your private key is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oci_api_key.pem&lt;/code&gt; and your public key is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oci_api_key_public.pem&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;add-the-public-key-to-your-user-account&quot;&gt;Add the Public Key to Your User Account.&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Activate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cli-app&lt;/code&gt; environment:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; workon cli-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Display the public key.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; cat $&lt;/span&gt;HOME/.oci/oci_api_key_public.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the public key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the public key to your user account:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Go to the Console.&lt;/li&gt;
      &lt;li&gt;Click your Profile menu (your avatar), and then click &lt;strong&gt;User Settings&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Click &lt;strong&gt;API Keys&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Click &lt;strong&gt;Add API Key&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Click &lt;strong&gt;Paste Public Key&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Paste value from previous step, including the lines with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BEGIN PUBLIC KEY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;END PUBLIC KEY&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Whenever you want to use the OCI CLI, activate it with: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workon cli-app&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;When you change project names, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workon&lt;/code&gt; deactivates your current working environment. This way, you can quickly switch between environments.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;set-up-a-cluster&quot;&gt;Set Up a Cluster&lt;/h2&gt;

&lt;p&gt;Install and configure management options for your Kubernetes cluster. Later, deploy your application to this cluster.&lt;/p&gt;

&lt;h3 id=&quot;add-compartment-policy&quot;&gt;Add Compartment Policy&lt;/h3&gt;

&lt;p&gt;If your username is in the &lt;strong&gt;Administrators&lt;/strong&gt; group, then skip this section. Otherwise, have your administrator add the following policy to your tenancy:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;allow group &amp;lt;the-group-your-username-belongs&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;to manage compartments &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;tenancy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this privilege, you can create a compartment for all the resources in your tutorial.&lt;/p&gt;

&lt;h3 id=&quot;steps-to-add-the-policy&quot;&gt;Steps to Add the Policy&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;In the top navigation bar, open the &lt;strong&gt;Profile&lt;/strong&gt; menu.&lt;/li&gt;
  &lt;li&gt;Click your username.&lt;/li&gt;
  &lt;li&gt;In the left pane, click Groups.&lt;/li&gt;
  &lt;li&gt;In a notepad, copy the &lt;strong&gt;Group Name&lt;/strong&gt; that your username belongs.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Identity &amp;amp; Security&lt;/strong&gt;. Under &lt;strong&gt;Identity&lt;/strong&gt;, click &lt;strong&gt;Policies&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select your compartment from the &lt;strong&gt;Compartment&lt;/strong&gt; drop-down.&lt;/li&gt;
  &lt;li&gt;Click Create Policy.&lt;/li&gt;
  &lt;li&gt;Fill in the following information:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manage-compartments&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Allow the group &amp;lt;the-group-your-username-belongs&amp;gt; to list, create, update, delete and recover compartments in the tenancy.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Policy Builder&lt;/strong&gt;, click Customize (Advanced).&lt;/li&gt;
  &lt;li&gt;Paste in the following policy:&lt;/li&gt;
  &lt;li&gt;allow group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;the-group-your-username-belongs&amp;gt;&lt;/code&gt; to manage compartments in tenancy&lt;/li&gt;
  &lt;li&gt;Click Create.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compartments&lt;/code&gt; resource-type in &lt;a href=&quot;https://docs.oracle.com/iaas/Content/Identity/Reference/iampolicyreference.htm#Identity&quot;&gt;Verbs + Resource-Type Combinations for IAM&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-compartment&quot;&gt;Create a Compartment&lt;/h2&gt;

&lt;p&gt;Create a compartment for the resources that you create in this tutorial.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Identity &amp;amp; Security&lt;/strong&gt;. Under &lt;strong&gt;Identity&lt;/strong&gt;, click &lt;strong&gt;Compartments&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create Compartment&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Fill in the following information:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-compartment-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compartment for &amp;lt;your-description&amp;gt;.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Parent Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create Compartment&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; &lt;a href=&quot;https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#To&quot;&gt;Create a compartment&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-resource-policy&quot;&gt;Add Resource Policy&lt;/h2&gt;

&lt;p&gt;If your username is in the &lt;strong&gt;Administrators&lt;/strong&gt; group, then skip this section. Otherwise, have your administrator add the following policy to your tenancy:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;allow group &amp;lt;the-group-your-username-belongs&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;to manage all-resources &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;compartment &amp;lt;your-compartment-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this privilege, you can &lt;strong&gt;manage all resources&lt;/strong&gt; in your &lt;strong&gt;compartment&lt;/strong&gt;, essentially giving you administrative rights in that compartment.&lt;/p&gt;

&lt;h3 id=&quot;steps-to-add-the-policy-1&quot;&gt;Steps to Add the Policy&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Identity &amp;amp; Security&lt;/strong&gt;. Under &lt;strong&gt;Identity&lt;/strong&gt;, click &lt;strong&gt;Policies&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select your compartment from the &lt;strong&gt;Compartment&lt;/strong&gt; drop-down.&lt;/li&gt;
  &lt;li&gt;Click Create Policy.&lt;/li&gt;
  &lt;li&gt;Fill in the following information:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manage-&amp;lt;your-compartment-name&amp;gt;-resources&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Allow users to list, create, update, and delete resources in &amp;lt;your-compartment-name&amp;gt;.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Policy Builder&lt;/strong&gt;, select the following choices:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Policy use cases:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compartment Management&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Common policy templates:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Let compartment admins manage the compartment&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Groups:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;the-group-your-username-belongs&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-tenancy&amp;gt;(root)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click Create.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; &lt;a href=&quot;https://docs.oracle.com/iaas/Content/Identity/Concepts/commonpolicies.htm&quot;&gt;Common Policies&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-a-cluster-with-quick-create&quot;&gt;Create a Cluster with ‘Quick Create’&lt;/h3&gt;

&lt;p&gt;Create a cluster with default settings and new network resources through the ‘Quick Create’ workflow.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sign in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click &lt;strong&gt;Kubernetes Clusters (OKE)&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click Create Cluster.&lt;/li&gt;
  &lt;li&gt;Select Quick Create.&lt;/li&gt;
  &lt;li&gt;Click Launch Workflow. 
The &lt;strong&gt;Create Cluster&lt;/strong&gt; dialog is displayed.&lt;/li&gt;
  &lt;li&gt;Fill in the following information.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-cluster-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compartment:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-compartment-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Kubernetes Version:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;take-default&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Kubernetes API Endpoint:&lt;/strong&gt; Public Endpoint 
 The Kubernetes cluster is hosted in a public subnet with an auto-assigned public IP address.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Kubernetes Worker Nodes:&lt;/strong&gt; Private Workers 
 The Kubernetes worker nodes are hosted in a private subnet.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Shape:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VM.Standard.E3.Flex&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Number of Nodes:&lt;/strong&gt; 3&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Specify a custom boot volume size:&lt;/strong&gt; Clear the check box.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Next&lt;/strong&gt;. 
All your choices are displayed. Review them to ensure that everything is configured correctly.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create Cluster&lt;/strong&gt;. 
The services set up for your cluster are displayed.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Close&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Get a cup of coffee. It takes a few minutes for the cluster to be created. 
You have successfully created a Kubernetes cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-up-local-access-to-your-cluster&quot;&gt;Set Up Local Access to Your Cluster&lt;/h2&gt;

&lt;p&gt;After you create a Kubernetes cluster, set up your local system to access the cluster.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sign in to the Oracle Cloud Infrastructure &lt;strong&gt;Console&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click &lt;strong&gt;Kubernetes Clusters (OKE)&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click the link to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-cluster&amp;gt;&lt;/code&gt;. The information about your cluster is displayed.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Access Cluster&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Local Access&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the steps provided in the dialog. They are reprinted here for your reference.&lt;/p&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;Note: If you are not in your virtual environment, enter: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workon cli-app&lt;/code&gt; before you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; commands.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Check your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oci&lt;/code&gt; CLI version.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; oci -v
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Make your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kube&lt;/code&gt; directory if it doesn’t exist.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; mkdir -p $&lt;/span&gt;HOME/.kube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Create a kubeconfig file for your setup. Use the information from &lt;strong&gt;Access Your Cluster&lt;/strong&gt; dialog.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; oci ce cluster create-kubeconfig &amp;lt;use data from dialog&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Export the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUBECONFIG&lt;/code&gt; environment variable.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; export KUBECONFIG=$&lt;/span&gt;HOME/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;Note: If you want to have the environment variable start in a new shell, then add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export KUBECONFIG=$HOME/.kube/config&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; file.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test your cluster configuration with the following commands. 
List clusters:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl get service
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Get deployment details:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl describe deployment
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Get pods:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl get pods
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;Note: Since no application is deployed, the last two commands produce: “No resources found in default namespace.”&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;Note: To look at a different cluster, specify a different config file on the command line. Example:&lt;/p&gt;

      &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;kubectl --kubeconfig=&amp;lt;/path/to/config/file&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With your cluster access set up, you are now ready to prepare your application for deployment.&lt;/p&gt;

&lt;h2 id=&quot;build-a-local-application&quot;&gt;Build a Local Application&lt;/h2&gt;

&lt;p&gt;Build a local application and a Docker image for the application.&lt;/p&gt;

&lt;h3 id=&quot;create-a-local-application&quot;&gt;Create a Local Application&lt;/h3&gt;

&lt;p&gt;Create your Node.js application.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start an OCI CLI session.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a directory for your application.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; mkdir node-hello-app
 cd node-hello-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

    &lt;p&gt;Create the file:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; vi package.json
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;In the file, input the following text, update the optional author and repository fields and then save the file:&lt;/p&gt;

    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node-hello-app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Node Express Hello application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Example User &amp;lt;username@example.com&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node app.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git://github.com/username/repository.git&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UPL-1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the NPM packages.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; npm install
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a “Hello, World!” application.&lt;/p&gt;

    &lt;p&gt;Create the file:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; vi app.js
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;In the file, input the following text and save the file:&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;
    
 &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;h1&amp;gt;Hello World from Node.js!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    
 &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello World app listening on port &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You have successfully set up your Node.js app.&lt;/p&gt;

&lt;h2 id=&quot;run-the-local-application&quot;&gt;Run the Local Application&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run your Node.js application.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; node app.js
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The Node Express server starts and displays:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;     Hello World app listening on port 3000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Test the application using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; or your browser.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;To test with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;, enter:&lt;/p&gt;

        &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;  curl -X GET http://localhost:3000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;To test with your browser, connect a browser window to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&amp;lt;your-ip-address&amp;gt;:3000&lt;/code&gt; (Optional).&lt;/p&gt;

        &lt;p&gt;The app returns&lt;/p&gt;

        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World from Node.js!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stop the running application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Press &lt;strong&gt;Ctrl+C&lt;/strong&gt; to stop your application in the terminal window you started with.&lt;/p&gt;

&lt;p&gt;You have successfully created a Hello World application using Node.js and Express.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For detailed information on this example, see &lt;a href=&quot;https://expressjs.com/en/starter/hello-world.html&quot;&gt;Getting Started with Express&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build-a-docker-image&quot;&gt;Build a Docker Image&lt;/h2&gt;

&lt;p&gt;Next, create a Docker image for your Node.js Express application.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure you are in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-hello-app&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build a Docker image.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker build -t node-hello-app .
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You get a success message.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; [INFO] BUILD SUCCESS
 Successfully tagged node-hello-app:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the Docker image:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker run --rm -p 3000:3000 node-hello-app:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test the application.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; curl -X GET http://localhost:3000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The app returns:&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World from Node.js!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stop the running application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulations! You have successfully created a Node.js Express image.&lt;/p&gt;

&lt;h2 id=&quot;deploy-your-docker-image&quot;&gt;Deploy Your Docker Image&lt;/h2&gt;

&lt;p&gt;Push your Node.js Express image to OCI Container Registry. Then use the image to deploy your application.&lt;/p&gt;

&lt;h3 id=&quot;create-a-docker-repository&quot;&gt;Create a Docker Repository&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click &lt;strong&gt;Container Registry&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;In the left navigation, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-compartment-name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Click Create Repository.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a &lt;strong&gt;private repository&lt;/strong&gt; with your choice of repo name:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; &amp;lt;repo-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &amp;lt;image-path-name&amp;gt;/&amp;lt;image-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-apps/node-hello-app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to push your local image to Container Registry.&lt;/p&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: Before you can push a Docker image into a registry repository, &lt;strong&gt;the repository must exist in your compartment&lt;/strong&gt;. If the repository does not exist, the Docker push command does not work correctly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: The slash in a repository name &lt;strong&gt;does not represent a hierarchical directory structure&lt;/strong&gt;. The optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;image-path-name&amp;gt;&lt;/code&gt; helps to organize your repositories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;push-your-local-image&quot;&gt;Push Your Local Image&lt;/h2&gt;

&lt;p&gt;With your local Docker image created, push the image to the Container Registry.&lt;/p&gt;

&lt;p&gt;Follow these steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open your OCI CLI session.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log in to OCI Container Registry:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; docker login &amp;lt;region-key&amp;gt;&lt;/span&gt;.ocir.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You are prompted for your login name and password.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Username:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;user-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Password:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;auth-token&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List your local Docker images:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker images
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The Docker images on your system are displayed. Identify the image you created in the last section: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-hello-app&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tag&lt;/strong&gt; your local image with the &lt;strong&gt;URL for the registry&lt;/strong&gt; plus the &lt;strong&gt;repo name&lt;/strong&gt;, so you can push it to that repo.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;     docker tag &amp;lt;your-local-image&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&amp;lt;repo-url&amp;gt;/&amp;lt;repo-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Replace &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;repo-url&amp;gt;&lt;/code&gt;&lt;/strong&gt; with: 
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;region-key&amp;gt;.ocir.io/&amp;lt;tenancy-namespace&amp;gt;/&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Replace &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;repo-name&amp;gt;&lt;/code&gt;&lt;/strong&gt; with: 
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;image-folder-name&amp;gt;/&amp;lt;image-name&amp;gt;&lt;/code&gt; from the &lt;strong&gt;Create a Docker Repository&lt;/strong&gt; section.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Here is an example after combining both:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker tag node-hello-app iad.ocir.io/my-namespace/node-apps/node-hello-app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;In this example, the components are:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Repo URL:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iad.ocir.io/my-namespace/&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Repo name:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-apps/node-hello-app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;Note: OCI Container Registry now supports creating a registry repo in any compartment rather than only in the root compartment (tenancy). To push the image to the repo you created, combine the registry URL with the exact repo name. OCI Container Registry matches based on the unique repo name and pushes your image.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check your Docker images to see if the image is &lt;strong&gt;copied&lt;/strong&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker images
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;The tagged image has &lt;strong&gt;the same image ID&lt;/strong&gt; as your local image.&lt;/li&gt;
      &lt;li&gt;The tagged image name is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;region-key&amp;gt;.ocir.io/&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;image-path-name&amp;gt;/&amp;lt;image-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push the image to Container Registry.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; docker push &amp;lt;copied-image-name&amp;gt;&lt;/span&gt;:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; docker push iad.ocir.io/my-namespace/node-apps/node-hello-app:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Open the navigation menu and click &lt;strong&gt;Developer Services&lt;/strong&gt;. Under &lt;strong&gt;Containers &amp;amp; Artifacts&lt;/strong&gt;, click &lt;strong&gt;Container Registry&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Find your image in Container Registry after the push command is complete.&lt;/p&gt;

&lt;h2 id=&quot;deploy-the-image&quot;&gt;Deploy the Image&lt;/h2&gt;

&lt;p&gt;With your image in Container Registry, you can now deploy your image and app.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a registry secret for your application. This secret authenticates your image when you deploy it to your cluster.&lt;/p&gt;

    &lt;p&gt;To create your secret, fill in the information in this template .&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; kubectl create secret docker-registry ocirsecret --docker-server=&amp;lt;region-key&amp;gt;&lt;/span&gt;.ocir.io  &lt;span class=&quot;nt&quot;&gt;--docker-username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;user-name&amp;gt;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--docker-password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;auth-token&amp;gt;'&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--docker-email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;email-address&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;After the command runs, you get a message similar to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret/ocirsecret created&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Verify that the secret is created. Issue the following command:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl get secret ocirsecret --output=yaml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The output includes information about your secret in the yaml format.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Determine the host URL to your registry image using the following template:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; &amp;lt;region-code&amp;gt;&lt;/span&gt;.ocir.io/&amp;lt;tenancy-namespace&amp;gt;/&amp;lt;repo-name&amp;gt;/&amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Example:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; iad.ocir.io/my-namespace/node-apps/node-hello-app:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On your system, create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-app.yaml&lt;/code&gt; with the following text:&lt;/p&gt;

    &lt;p&gt;Replace the following place holders:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-image-url&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-secret-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-app&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;your-image-url&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;your-secret-name&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-app-lb&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;flexible&quot;&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape-flex-min&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&quot;&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;service.beta.kubernetes.io/oci-load-balancer-shape-flex-max&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100&quot;&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deploy your application with the following command.&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl create -f node-app.yaml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Output:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; deployment.apps/node-app created
 service/node-app-lb created
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;notice&quot;&gt;
  &lt;p&gt;Note: In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-app.yaml&lt;/code&gt; file, the code after the dashes adds a flexible load balancer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;test-your-app&quot;&gt;Test Your App&lt;/h2&gt;

&lt;p&gt;After you deploy your app, it might take the load balancer a few seconds to load.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Check if the load balancer is live:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl get service
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Repeat the command until load balancer is assigned an IP address.&lt;/p&gt;

    &lt;blockquote class=&quot;notice&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While waiting for the load balancer to deploy, you can check the status of your cluster with these commands:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;Get each pods status: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get pods&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;Get app status: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get deployment&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the load balancer IP address to connect to your app in a browser:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt; http://&amp;lt;load-balancer-IP-address&amp;gt;&lt;/span&gt;:3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The browser displays: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;Hello World from Node.js!&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Undeploy your application from the cluster. &lt;strong&gt;(Optional)&lt;/strong&gt; To remove your application run this command:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; kubectl delete -f node-app.yaml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Output:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt; deployment.apps/node-app deleted
 service &quot;node-app-lb&quot; deleted
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Your application is now removed from your cluster.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;p&gt;You have successfully created a Hello World application, deployed it to a Kubernetes cluster and made it accessible on the internet, using the Node Express framework.&lt;/p&gt;

&lt;p&gt;Check out these sites to explore more information about development with Oracle products:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.oracle.com/&quot;&gt;Oracle Developers Portal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com/cloud/&quot;&gt;Oracle Cloud Infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Oracle Developer Community</name>
        
        
      </author>

      

      
        <category term="OCI" />
      
        <category term="open-source" />
      
        <category term="nodejs" />
      
        <category term="front-end" />
      
        <category term="kubernetes" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">How to Deploy Spark Standalone in Oracle Cloud (OCI)</title>
      <link href="https://cool.devo.build/collections/tutorials/how-to-deploy-spark-oci" rel="alternate" type="text/html" title="How to Deploy Spark Standalone in Oracle Cloud (OCI)" />
      <published>2021-09-30T01:00:00+00:00</published>
      <updated>2021-09-30T01:00:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/how-to-deploy-spark-oci</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/how-to-deploy-spark-oci">&lt;p&gt;The following walk-through guides you through the steps needed to set up your environment to run Spark and Hadoop in Oracle Cloud Infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You have deployed a VM 2.1 or + with Oracle Linux 7.9 (OEL7) in Oracle Cloud Infrastructure (OCI).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The installation of Oracle Linux 7.9 is using a JVM by default.&lt;/li&gt;
  &lt;li&gt;You have access to root either directly or via sudo. By default in OCI, you are connected like “opc” user with sudo privilege.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;    [opc@xxx ~]$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-version&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    java version &quot;1.8.0_281&quot;
    Java(TM) SE Runtime Environment (build 1.8.0_281-b09)
    Java HotSpot(TM) 64-Bit Server VM (build 25.281-b09, mixed mode)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;java-installation&quot;&gt;Java Installation&lt;/h2&gt;

&lt;p&gt;The install is quite simple. It consists of setting up Java, installing Spark and Hadoop components and libraries. Lets start with setting up the Spark and Hadoop environment.&lt;/p&gt;

&lt;p&gt;Download the last version of JDK 1.8 because Hadoop 2.X is using this Java version.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;rpm -ivh /home/opc/jdk-8u271-linux-x64.rpm
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check Java Version.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;java -version
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;spark-and-hadoop-setup&quot;&gt;Spark and Hadoop Setup&lt;/h2&gt;

&lt;p&gt;The next step is to install Spark and Hadoop environment.&lt;/p&gt;

&lt;p&gt;First, choose the version of Spark and Hadoop you want to install. Then, download the version you want to install:&lt;/p&gt;

&lt;h3 id=&quot;download-spark-245-for-hadoop-27&quot;&gt;Download Spark 2.4.5 for Hadoop 2.7&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;cd /home/opc
wget http://apache.uvigo.es/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;download-spark-247-for-hadoop-27&quot;&gt;Download Spark 2.4.7 for Hadoop 2.7&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;wget http://apache.uvigo.es/spark/spark-2.4.7/spark-2.4.7-bin-hadoop2.7.tgz
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;download-spark-311-for-hadoop-32&quot;&gt;Download Spark 3.1.1 for Hadoop 3.2&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;wget http://apache.uvigo.es/spark/spark-3.1.1/spark-3.1.1-bin-hadoop3.2.tgz
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-the-spark-and-hadoop-version&quot;&gt;Install the Spark and Hadoop Version&lt;/h3&gt;

&lt;p&gt;Install the Spark and Hadoop Version choosen in the directory “/opt”.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo -i
cd /opt
tar -zxvf /home/opc/spark-2.4.5-bin-hadoop2.7.tgz
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;or 
&lt;span class=&quot;go&quot;&gt;tar -zxvf /home/opc/spark-2.4.7-bin-hadoop2.7.tgz
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;or
&lt;span class=&quot;go&quot;&gt;tar -zxvf /home/opc/spark-3.1.1-bin-hadoop3.2.tgz
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-pyspark-in-python3-environment&quot;&gt;Install PySpark in Python3 environment&lt;/h2&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;/opt/Python-3.7.6/bin/pip3 install 'pyspark=2.4.7'
/opt/Python-3.7.6/bin/pip3 install findspark
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we shall create a virtual environment and enable it.&lt;/p&gt;

&lt;h3 id=&quot;modify-your-environment-to-use-this-spark-and-hadoop-version&quot;&gt;Modify your environment to use this Spark and Hadoop Version&lt;/h3&gt;

&lt;p&gt;Add to “.bashrc” for the user “opc” the following lines:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Add by %OP%
&lt;span class=&quot;go&quot;&gt;export PYTHONHOME=/opt/anaconda3
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;export PATH=$&lt;/span&gt;PYTHONHOME/bin:&lt;span class=&quot;nv&quot;&gt;$PYTHONHOME&lt;/span&gt;/condabin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;SPARK ENV
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;/usr/libexec/java_home&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;export SPARK_HOME=/opt/spark-2.4.5-bin-hadoop2.7
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;export PATH=$&lt;/span&gt;SPARK_HOME/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;export PYSPARK_PYTHON=python3

export PYSPARK_DRIVER_PYTHON=jupyter
export PYSPARK_DRIVER_PYTHON_OPTS='notebook'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test-your-spark-and-hadoop-environment&quot;&gt;Test your Spark and Hadoop Environment&lt;/h2&gt;

&lt;p&gt;If you’re running directly on a virtual machine and have a browser installed it should take you directly into the jupyter environment. Connect to your “&lt;a href=&quot;http://xxx.xxx.xxx.xxx:8001/&quot;&gt;http://xxx.xxx.xxx.xxx:8001/&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;And upload the next notebooks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/operard/oracle-cloud-tutorial/blob/main/notebooks/Test_findSpark.ipynb&quot;&gt;Notebook test findspark&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/operard/oracle-cloud-tutorial/blob/main/notebooks/Test%20PySpark.ipynb&quot;&gt;Notebook test Pyspark&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/operard/oracle-cloud-tutorial/blob/main/notebooks/Test_PySpark_Mysql.ipynb&quot;&gt;Notebook test Pyspark with Mysql&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Olivier Francois Xavier Perard</name>
        
        
      </author>

      

      
        <category term="oci" />
      
        <category term="open-source" />
      
        <category term="spark" />
      
        <category term="java" />
      
        <category term="data-science" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">Why Infrastructure as Code?</title>
      <link href="https://cool.devo.build/collections/tutorials/tf-101/1-why-iac" rel="alternate" type="text/html" title="Why Infrastructure as Code?" />
      <published>2021-09-28T08:13:00+00:00</published>
      <updated>2021-09-28T08:13:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/tf-101/1-why-iac</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/tf-101/1-why-iac">&lt;p&gt;Terraform.  Infrastructure-as-Code (IaC).  Automation.  DevOps.  DevSecOps.  So many buzz words are floating around… what’s the big deal anyway?  There are lots of different ways to manage IT resources and cloud infrastructure.  What makes Terraform so great?  Why should you care about IaC?  IaC might not be for everyone, but it is for &lt;em&gt;almost&lt;/em&gt; everyone.&lt;/p&gt;

&lt;h2 id=&quot;so-many-ways-to-manage&quot;&gt;So Many Ways to Manage&lt;/h2&gt;

&lt;p&gt;Let’s start with the basics.  When there are IT resources to manage, what are some of our common options?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GUI (aka Console)&lt;/li&gt;
  &lt;li&gt;Command-Line Interface (CLI)&lt;/li&gt;
  &lt;li&gt;API&lt;/li&gt;
  &lt;li&gt;IaC tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;guis&quot;&gt;GUIs&lt;/h3&gt;

&lt;p&gt;Most of us start with the GUI.  In Oracle Cloud Infrastructure (OCI) this is the &lt;a href=&quot;https://www.oracle.com/cloud/sign-in.html&quot;&gt;OCI Console&lt;/a&gt;.  GUIs are typically pretty fancy, fun, and easy to use.  While they can be entertaining and great for initially learning a system/platform, they’re not always the most scalable or efficient.  UIs require time and manual user intervention (unless you’re using something to automate the pointing-and-clicking, such as &lt;a href=&quot;https://www.selenium.dev&quot;&gt;Selenium&lt;/a&gt;, but that’s a pretty niche edge case).  Things only “work” when someone’s there to click a button.  It’s difficult (read: &lt;em&gt;impossible&lt;/em&gt;) to rapidly manage resources using a UI.  Just the time it takes to point-and-click, plus wait for the browser to update… it’s not super fast.&lt;/p&gt;

&lt;p&gt;Another downside to consider with GUIs is that it’s a bit more difficult to roll back should something go sideways.  Rolling back typically involves lots of pointing-and-clicking, undoing the changes that were previously made.  More time and human involvement.  Yeck.  Great for learning and playing around, but certainly not ideal for maintaining anything beyond a lab/sandbox environment.&lt;/p&gt;

&lt;h3 id=&quot;clis&quot;&gt;CLIs&lt;/h3&gt;

&lt;p&gt;CLIs are marginally better than a GUI.  Instead of pointing-and-clicking, commands are issued.  CLIs are really a text user interface.  Most CLIs allow for running “headless”, meaning they do not require user input (all input can be provided at runtime).  One benefit here is that it’s easier to use CLIs with automated workflows.  It’s a step in the right direction.  Unless there’s some sort of scripting (shell scripts, Ruby, Python, etc.) used, it’s impossible to embed any sort of logic when using CLIs.  This means that it’s great to send a single command (or even a string of commands), however it can be difficult to maintain a high level of assurance when using CLIs (without more involved scripting logic being used with the CLI).&lt;/p&gt;

&lt;h3 id=&quot;apis&quot;&gt;APIs&lt;/h3&gt;

&lt;p&gt;Who doesn’t love APIs?  At the end of the day, almost everything interacts with the underlying APIs.  Most GUIs, CLIs, and even IaC tools interact with APIs to do what they do.  Whether you use curl, &lt;a href=&quot;https://www.postman.com&quot;&gt;Postman&lt;/a&gt;, &lt;a href=&quot;https://paw.cloud&quot;&gt;Paw&lt;/a&gt;, or other tools, you’re typically interacting with a single API endpoint.  There’s still an inherent lack of logic (unless you use some sort of scripting/application to add this).&lt;/p&gt;

&lt;p&gt;Many of us have written small scripts/apps that interact with APIs to achieve certain outcomes.  This is terrific, but it’s pretty manually intensive to create.  For many of us, it takes a short bit to custom-build a script/app for each type of management need.  While this gives an extreme amount of customizability (the sky’s the limit with what you can do), it’s really not practical or scalable.&lt;/p&gt;

&lt;p&gt;All cloud providers present an API for managing the platform.  OCI is no exception, providing a terrific &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/api/&quot;&gt;API interface&lt;/a&gt; for developers and users to utilize when interacting with OCI.  It’s certainly one option.  There are other tools such as &lt;a href=&quot;https://www.upbound.io&quot;&gt;Upbound&lt;/a&gt; that offer a great twist for having a single interface managing multiple backend interfaces.&lt;/p&gt;

&lt;h3 id=&quot;iac-tools&quot;&gt;IaC Tools&lt;/h3&gt;

&lt;p&gt;These are tools that are designed from the ground-up to manage infrastructure resources using code.  Resources are defined in code, with the tool itself providing the necessary structure and logic to quickly and easily build a definition of what you need/want an environment to be.  The basic “scaffolding” (logic elements, API interactions, etc.) are all abstracted, allowing you to focus on describing the resources you need/want to exist in the environment.&lt;/p&gt;

&lt;p&gt;This is by far one of the easiest and fastest ways to build and maintain cloud environments.  This isn’t limited to cloud - on-premesis resources can often be managed with IaC tools.  Are you using multiple cloud providers?  Even more reason to utilize IaC in managing your IT infrastructure.&lt;/p&gt;

&lt;p&gt;With IaC, we’re often using git on the back-end, allowing us to get a great history of changes (which can also allow for easy and rapid rollbacks).  Using git for storing the code definitions, we’re able to use pretty standard processes and tools to monitor/approve/manage changes before they’re made.  Whether using policy-as-code (such as &lt;a href=&quot;https://www.openpolicyagent.org&quot;&gt;Open Policy Agent&lt;/a&gt;, with implementations such as &lt;a href=&quot;https://github.com/oracle-devrel/oci-pac-opa&quot;&gt;Policy-as-Code on OCI using Open Policy Agent&lt;/a&gt;) or a manual pull request (PR)/merge request (MR) review process, you can have a really solid review/approval/compliance mechanism (not to mention yet another audit trail that’s separate from the cloud/platform itself).&lt;/p&gt;

&lt;p&gt;One of the most common and popular IaC tools is &lt;a href=&quot;https://www.terraform.io&quot;&gt;HashiCorp Terraform&lt;/a&gt;, with other tools (such as &lt;a href=&quot;https://www.pulumi.com&quot;&gt;Pulumi&lt;/a&gt;) also being available.  The end goal with these tools is to manage infrastructure programmatically.&lt;/p&gt;

&lt;p&gt;Some like to use tools that are predominantly in the realm of configuration management (such as &lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt;, &lt;a href=&quot;https://www.chef.io&quot;&gt;Chef&lt;/a&gt;/&lt;a href=&quot;https://cinc.sh&quot;&gt;Cinc&lt;/a&gt;, etc.  These are certainly options for managing infrastructure, but you may be better off with tools that focus on &lt;em&gt;infrastructure management&lt;/em&gt; (and less about &lt;em&gt;configuration management&lt;/em&gt;).  OCI is no exception in supporting many of these different platforms.&lt;/p&gt;

&lt;p&gt;In the rest of this series, we’re going to target using Terraform to manage OCI infrastructure.  Why Terraform?  It’s fairly mature at this point, widely adopted and has support for a wide variety of platforms.  Many cloud platforms (including OCI) and IT systems support using Terraform to manage resources.  There are plenty of examples, platforms and strong user support for it, making it an ideal tool.  Terraform is targeted at managing infrastructure, not so much the configuration management side of things.  And it’s super powerful when combined with a traditional configuration management tool like Ansible.&lt;/p&gt;

&lt;p&gt;This series will take you through how to harness the power of infrastructure-as-code (IaC) in your environment.  If this is your first time using Terraform, you’re a bit rusty, or you’re just looking to fill any potential gaps in your knowledge, this should be a worthwhile time investment.  It’s fairly short, but will take you through the basics of how Terraform works, then into an actual working example.  During the journey, you’ll find several key resources which you’ll find invaluable as you continue to work with Terraform to manage your OCI environment.&lt;/p&gt;

&lt;p&gt;A picture is worth a thousand words.  Going through this tutorial, you’ll be able to better understand why IaC is so cool and has gained so much traction.  You’ll also learn how to harness IaC to improve the efficiency of managing your environment, and that alone is worth the time.&lt;/p&gt;

&lt;p&gt;Until our next lesson, happy coding!  Take a look at the &lt;a href=&quot;2-experiencing-terraform&quot;&gt;next lesson&lt;/a&gt; to go through a very quick experience in using Terraform.  From there we’ll dive into several aspects of how Terraform works.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Tim Clegg</name>
        
        
      </author>

      
        
          <category term="iac" />
        
          <category term="opensource" />
        
      

      
        <category term="open-source" />
      
        <category term="terraform" />
      
        <category term="iac" />
      
        <category term="devops" />
      
        <category term="beginner" />
      

      

      
      
    </entry>
  
    <entry>
      

      <title type="html">Deploying the Argo CD on Oracle Container Engine for Kubernetes (OKE)</title>
      <link href="https://cool.devo.build/collections/tutorials/deploying-the-argo-project-on-oke" rel="alternate" type="text/html" title="Deploying the Argo CD on Oracle Container Engine for Kubernetes (OKE)" />
      <published>2021-09-22T15:30:00+00:00</published>
      <updated>2021-09-22T15:30:00+00:00</updated>
      <id>https://cool.devo.build/collections/tutorials/deploying-the-argo-project-on-oke</id>
      
      
        <content type="html" xml:base="https://cool.devo.build/collections/tutorials/deploying-the-argo-project-on-oke">&lt;p&gt;I was quite thrilled to learn that the &lt;a href=&quot;https://argoproj.github.io/&quot;&gt;Argo Project&lt;/a&gt; was &lt;a href=&quot;https://www.cncf.io/blog/2020/04/07/toc-welcomes-argo-into-the-cncf-incubator/&quot;&gt;accepted as incubator-level&lt;/a&gt; project in CNCF’s stack.&lt;/p&gt;

&lt;p&gt;As a brief introduction, the Argo Project has 4 main components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://argoproj.github.io/projects/argo/&quot;&gt;Argo Workflows&lt;/a&gt;: a native workflow engine to orchestrate parallel jobs on Kubernetes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://argoproj.github.io/projects/argo-cd/&quot;&gt;Argo CD&lt;/a&gt;: a declarative, GitOps continuous delivery tool for Kubernetes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://argoproj.github.io/argo-rollouts/&quot;&gt;Argo Rollouts&lt;/a&gt;: provides additional deployment strategies such as Blue-Green and Canary to Kubernetes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://argoproj.github.io/projects/argo-events/&quot;&gt;Argo Events&lt;/a&gt;: provides an event-based dependency manager for Kubernetes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So without wasting any time, let’s take Argo CD for a spin and &lt;a href=&quot;https://www.youtube.com/watch?v=R8OWNspU_yE&quot;&gt;I’ll be your Huckleberry&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-test-oke-cluster-for-argo&quot;&gt;Creating a test OKE cluster for Argo&lt;/h2&gt;

&lt;p&gt;Clone the &lt;a href=&quot;https://github.com/oracle-terraform-modules/terraform-oci-oke/blob/master/docs/quickstart.adoc#provisioning-using-this-git-repo&quot;&gt;terraform-oci-oke repo&lt;/a&gt; or &lt;a href=&quot;https://github.com/oracle-terraform-modules/terraform-oci-oke/blob/master/docs/quickstart.adoc#provisioning-using-the-hashicorp-registry-module&quot;&gt;use the published terraform OKE module &lt;/a&gt; on the &lt;a href=&quot;https://registry.terraform.io/modules/oracle-terraform-modules/oke/oci/latest&quot;&gt;Terraform registry&lt;/a&gt; to create an OKE Cluster. You can also use &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengcreatingclusterusingoke.htm#create-quick-cluster&quot;&gt;the Quick Create &lt;/a&gt; feature to create your cluster if you don’t want to use terraform.&lt;/p&gt;

&lt;p&gt;Ensure you use the following parameters in your terraform.tfvars:&lt;/p&gt;

&lt;div class=&quot;language-tf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;label_prefix&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;argo&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;us-phoenix-1&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;vcn_dns_label&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;oke&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vcn_name&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;oke&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;create_bastion_host&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;create_operator&lt;/span&gt;              &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;admin_instance_principal&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;control_plane_type&lt;/span&gt;           &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;node_pools&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;np1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;VM.Standard.E4.Flex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ocpus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node_pool_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boot_volume_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform init  
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;terraform apply &lt;span class=&quot;nt&quot;&gt;-auto-approve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once Terraform has finished, ssh to the operator by copying the ssh command from the output e.g. :&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ~/.ssh/id_rsa &lt;span class=&quot;nt&quot;&gt;-J&lt;/span&gt; opc@XXX.XXX.XXX.XXX opc@10.0.1.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;argo-cd&quot;&gt;Argo CD&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://argoproj.github.io/projects/argo-cd/&quot;&gt;Argo CD&lt;/a&gt; is a declarative, GitOps continuous delivery tool for Kubernetes. This says a lot without being too wordy. When you look at the user guide and features, this brief description probably undersells Argo CD.&lt;/p&gt;

&lt;p&gt;Let’s follow Argo CD’s &lt;a href=&quot;https://argoproj.github.io/argo-cd/getting_started/&quot;&gt;getting started guide&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download and install the Argo CD cli:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sLO&lt;/span&gt; https://github.com/argoproj/argo-cd/releases/download/v2.1.3/argocd-linux-amd64
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x argocd-linux-amd64
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;argocd-linux-amd64 /usr/local/bin/argocd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s use port-forwarding to access the UI. First, we establish an SSH tunnel to operator:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -L 8080:localhost:8080 -i ~/.ssh/id_rsa -J opc@&amp;lt;bastion_public_ip&amp;gt; opc@&amp;lt;operator_private_ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we port-forward to the ArgoCD service:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl port-forward --address 0.0.0.0 svc/argocd-server -n argocd 8080:443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now access the ArgoCD UI in our browser at https://localhost:8080/&lt;/p&gt;

&lt;p&gt;Or we can change the service type to Load Balancer and use the IP Address of the Load Balancer to access the UI:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;kubectl patch svc argocd-server &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; argocd &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will be warned of a potential security risk. That’s because we didn’t install certificates etc. We can do that later by using &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; and &lt;a href=&quot;https://cert-manager.io/&quot;&gt;cert-manager&lt;/a&gt; and then use this together with an &lt;a href=&quot;https://medium.com/oracledevs/experimenting-with-ingress-controllers-on-oracle-container-engine-oke-part-1-5af51e6cdb85&quot;&gt;Ingress Controller&lt;/a&gt; like the &lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/&quot;&gt;NGINX Ingress Controller&lt;/a&gt;. Make sure you read Argo’s &lt;a href=&quot;https://argoproj.github.io/argo-cd/operator-manual/ingress/&quot;&gt;documentation on using Ingress&lt;/a&gt;. But we are in a hurry, so we’ll just skip these and click ‘Advanced’ &amp;gt; ‘Accept the Risk and Continue’.&lt;/p&gt;

&lt;p&gt;The ArgoCD login page will appear and we need the password:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Login with username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; and the password above.&lt;/p&gt;

&lt;p&gt;Since we didn’t add the certificate, we’ll be warned of potential security risks ahead. To solve this, we can add a certificate using  Again, we’re in a bit of a hurry, so we’ll just skip these and click ‘Accept the Risk and Continue’.&lt;/p&gt;

&lt;p&gt;We’ll now be redirected to Argo CD login page. Let’s retrieve the generated password:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;kubectl get pods &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; argocd &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; app.kubernetes.io/name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argocd-server &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; name | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and login with username admin and the retrieved password.&lt;/p&gt;

&lt;p&gt;Follow the rest of the instructions in &lt;a href=&quot;https://argoproj.github.io/argo-cd/getting_started/#creating-apps-via-ui&quot;&gt;creating apps via UI&lt;/a&gt;. Once the application is created, click on ‘Sync’ and watch the application being deployed as Kubernetes works its way to creating the various resources (deployment, service, ReplicaSet, pods, etc).&lt;/p&gt;

&lt;p&gt;Once the application is deployed, take a moment to poke around the Argo UI and the Kubernetes resources. Select the guestbook-ui service and click ‘Edit’. Change the service type from ClusterIP to LoadBalancer and then save. Once the OCI Load Balancer is provisioned, its public IP address appears. Awesome stuff. I pinch myself and make a quick check on OCI Console to verify the Load Balancer IP just to ensure I’m not imagining this. Nope, I’m not.&lt;/p&gt;

&lt;p&gt;From here, you can experiment with other applications such as the sock-shop or using other tools such as &lt;a href=&quot;https://helm.sh/&quot;&gt;helm &lt;/a&gt;or &lt;a href=&quot;https://kustomize.io/&quot;&gt;kustomize&lt;/a&gt;. You can find more examples in this &lt;a href=&quot;https://github.com/argoproj/argocd-example-apps&quot;&gt;example apps repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;argo-rollouts&quot;&gt;Argo Rollouts&lt;/h2&gt;

&lt;p&gt;Argo Rollouts provides additional deployment strategies such as Blue-Green and Canary to Kubernetes. Let’s dive right into it and follow Rollouts’ &lt;a href=&quot;https://argoproj.github.io/argo-rollouts/getting-started/&quot;&gt;getting started guide&lt;/a&gt; to do a blue-green deployment:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;kubectl create namespace argo-rollouts
kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s first install the Argo Rollouts kubectl plugin:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -LO  https://github.com/argoproj/argo-rollouts/releases/download/v1.0.7/kubectl-argo-rollouts-linux-amd64
chmod +x kubectl-argo-rollouts-linux-amd64
sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s test the plugin:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl argo rollouts version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Switching from the default Kubernetes &lt;a href=&quot;https://argoproj.github.io/argo-rollouts/getting-started/#converting-deployment-to-rollout&quot;&gt;Deployment to Rollout&lt;/a&gt; is very easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Change the apiVersion from apps/v1 to argoproj.io/v1alpha1&lt;/li&gt;
  &lt;li&gt;Change the kind from Deployment to Rollout&lt;/li&gt;
  &lt;li&gt;Add a deployment strategy to the Rollout object&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Create a bluegreen.yaml file (copied from the Argo CD documentation and example) on the operator host:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;argoproj.io/v1alpha1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Rollout&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;revisionHistoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollouts-demo&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;argoproj/rollouts-demo:blue&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;blueGreen&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;c1&quot;&gt;# activeService specifies the service to update with the new template hash at time of promotion.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This field is mandatory for the blueGreen update strategy.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;activeService&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen-active&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# previewService specifies the service to update with the new template hash before promotion.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This allows the preview stack to be reachable without serving production traffic.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This field is optional.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;previewService&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen-preview&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# autoPromotionEnabled disables automated promotion of the new stack by pausing the rollout&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# immediately before the promotion. If omitted, the default behavior is to promote the new&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# stack as soon as the ReplicaSet are completely ready/available.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Rollouts can be resumed using: `kubectl argo rollouts promote ROLLOUT`&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;autoPromotionEnabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen-active&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen-preview&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rollout-bluegreen&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and let’s deploy it:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; bluegreen.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that we have 2 pods created:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;kubectl get pods 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s list the ReplicaSet:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                                  DESIRED   CURRENT   READY   AGE   CONTAINERS       IMAGES                                       SELECTOR
rollout-bluegreen-6565b74f44          1         1         1       83s   rollouts-demo    argoproj/rollouts-demo:blue                  app=rollout-bluegreen,rollouts-pod-template-hash=6565b74f44
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can see that the image deployed is of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blue&lt;/code&gt; variety. Similarly, if get Argo Rollouts to print thing for us:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl argo rollouts get rollout rollout-bluegreen -w

Name:            rollout-bluegreen
Namespace:       default
Status:          ✔ Healthy
Strategy:        BlueGreen
Images:          argoproj/rollouts-demo:blue (stable, active)
Replicas:
  Desired:       2
  Current:       2
  Updated:       2
  Ready:         2
  Available:     2

NAME                                           KIND        STATUS     AGE    INFO
⟳ rollout-bluegreen                            Rollout     ✔ Healthy  21m
└──# revision:1
   └──⧉ rollout-bluegreen-6565b74f44           ReplicaSet  ✔ Healthy  20m    stable,active
      ├──□ rollout-bluegreen-6565b74f44-qps4m  Pod         ✔ Running  19m    ready:1/1
      └──□ rollout-bluegreen-6565b74f44-twx2x  Pod         ✔ Running  4m19s  ready:1/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also use the Argo Rollouts dashboard to visualize things. If you’re logged in the operator host, exit and login again:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -L 3100:localhost:3100 -i ~/.ssh/id_rsa -J opc@132.226.28.30 opc@10.0.0.14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, run the following command to access the dashboard:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl argo rollouts dashboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And use the browser to access the Rollout dashboards:&lt;/p&gt;

&lt;p&gt;Finally, since we deployed both services as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type=LoadBalancer&lt;/code&gt;, we will have 2 Load Balancers. You can look up their respective public IP addresses in the OCI console or use kubectl to look them up in the EXTERNAL-IP column when you run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get svc 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use you browser to access them:&lt;/p&gt;

&lt;p&gt;Both the active and preview will be blue.&lt;/p&gt;

&lt;p&gt;Let’s now patch to upgrade from blue to green:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl patch rollout rollout-bluegreen --type merge -p '{&quot;spec&quot;: {&quot;template&quot;: { &quot;spec&quot;: { &quot;containers&quot;: [{&quot;name&quot;: &quot;rollouts-demo&quot;,&quot;image&quot;: &quot;argoproj/rollouts-demo:green&quot;}]}}}}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we can see effect immediately:&lt;/p&gt;

&lt;p&gt;And if we access the preview and active Load Balancers, we’ll see the preview is green and active is still blue.&lt;/p&gt;

&lt;p&gt;Let’s give the rollout a promotion. We can use command line as thus:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;  $&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;kubectl promote rollout-bluegreen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if you have Argo Rollouts Dashboard still open, you can use that too.&lt;/p&gt;

&lt;p&gt;If we now access both load balancers, they’ll both show up as green. You can keep switching between them to simulate upgrading to newer versions of your application.&lt;/p&gt;

&lt;p&gt;I’ll pause here and leave Argo Events for a future post. For now, I hope this shows you that if you were considering running the Argo project on your Kubernetes cluster, OKE will work quite nicely with it.&lt;/p&gt;

&lt;p&gt;N.B. This article was originally posted on https://medium.com/oracledevs/deploying-the-argo-project-on-oke-ee96cabf8910. It has been updated to focus on ArgoCD and Rollouts and also to reflect the changes in the terraform-oci-oke project.&lt;/p&gt;</content>
      

      
      
      
      
      

      <author>
          <name>Ali Mukadam</name>
        
        
      </author>

      
        
          <category term="cloudapps" />
        
          <category term="opensource" />
        
      

      
        <category term="open-source" />
      
        <category term="oke" />
      
        <category term="kubernetes" />
      
        <category term="terraform" />
      
        <category term="devops" />
      

      

      
      
    </entry>
  
</feed>
